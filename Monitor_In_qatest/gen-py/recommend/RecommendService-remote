#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from recommend import RecommendService
from recommend.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string test(string word)')
    print('  Response recommend(Request req)')
    print('   fetchTabs(Request req)')
    print('   fetchBannerData(Request req)')
    print('  Response fetchTab(Request req)')
    print('  Response fetchBanner(Request req)')
    print('  OfflineResponse offlineRecommend(OfflineRequest req)')
    print('  string getRecoFlow()')
    print('  AdResponse fetchAd(AdRequest req)')
    print('  LorryResponse lorryRecommend(LorryRequest req)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = RecommendService.Client(protocol)
transport.open()

if cmd == 'test':
    if len(args) != 1:
        print('test requires 1 args')
        sys.exit(1)
    pp.pprint(client.test(args[0],))

elif cmd == 'recommend':
    if len(args) != 1:
        print('recommend requires 1 args')
        sys.exit(1)
    pp.pprint(client.recommend(eval(args[0]),))

elif cmd == 'fetchTabs':
    if len(args) != 1:
        print('fetchTabs requires 1 args')
        sys.exit(1)
    pp.pprint(client.fetchTabs(eval(args[0]),))

elif cmd == 'fetchBannerData':
    if len(args) != 1:
        print('fetchBannerData requires 1 args')
        sys.exit(1)
    pp.pprint(client.fetchBannerData(eval(args[0]),))

elif cmd == 'fetchTab':
    if len(args) != 1:
        print('fetchTab requires 1 args')
        sys.exit(1)
    pp.pprint(client.fetchTab(eval(args[0]),))

elif cmd == 'fetchBanner':
    if len(args) != 1:
        print('fetchBanner requires 1 args')
        sys.exit(1)
    pp.pprint(client.fetchBanner(eval(args[0]),))

elif cmd == 'offlineRecommend':
    if len(args) != 1:
        print('offlineRecommend requires 1 args')
        sys.exit(1)
    pp.pprint(client.offlineRecommend(eval(args[0]),))

elif cmd == 'getRecoFlow':
    if len(args) != 0:
        print('getRecoFlow requires 0 args')
        sys.exit(1)
    pp.pprint(client.getRecoFlow())

elif cmd == 'fetchAd':
    if len(args) != 1:
        print('fetchAd requires 1 args')
        sys.exit(1)
    pp.pprint(client.fetchAd(eval(args[0]),))

elif cmd == 'lorryRecommend':
    if len(args) != 1:
        print('lorryRecommend requires 1 args')
        sys.exit(1)
    pp.pprint(client.lorryRecommend(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
