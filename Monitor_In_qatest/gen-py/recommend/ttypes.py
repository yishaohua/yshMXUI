#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class FiltrationReason(object):
    """
    Attributes:
     - id
     - reason
    """


    def __init__(self, id=None, reason=None,):
        self.id = id
        self.reason = reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FiltrationReason')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ErrorReason(object):
    """
    Attributes:
     - name
     - reason
    """


    def __init__(self, name=None, reason=None,):
        self.name = name
        self.reason = reason

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ErrorReason')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdditionalInfo(object):
    """
    Attributes:
     - resourceType
     - id
     - name
     - icon
    """


    def __init__(self, resourceType=None, id=None, name=None, icon=None,):
        self.resourceType = resourceType
        self.id = id
        self.name = name
        self.icon = icon

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.resourceType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.icon = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdditionalInfo')
        if self.resourceType is not None:
            oprot.writeFieldBegin('resourceType', TType.STRING, 1)
            oprot.writeString(self.resourceType.encode('utf-8') if sys.version_info[0] == 2 else self.resourceType)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.icon is not None:
            oprot.writeFieldBegin('icon', TType.STRING, 4)
            oprot.writeString(self.icon.encode('utf-8') if sys.version_info[0] == 2 else self.icon)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LocalFileInfo(object):
    """
    Attributes:
     - fileName
     - title
     - duration
    """


    def __init__(self, fileName=None, title=None, duration=None,):
        self.fileName = fileName
        self.title = title
        self.duration = duration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fileName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.duration = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LocalFileInfo')
        if self.fileName is not None:
            oprot.writeFieldBegin('fileName', TType.STRING, 1)
            oprot.writeString(self.fileName.encode('utf-8') if sys.version_info[0] == 2 else self.fileName)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 2)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.duration is not None:
            oprot.writeFieldBegin('duration', TType.I32, 3)
            oprot.writeI32(self.duration)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Location(object):
    """
    Attributes:
     - cityName
     - countryCode
     - longitude
     - latitude
     - state
    """


    def __init__(self, cityName=None, countryCode=None, longitude=None, latitude=None, state=None,):
        self.cityName = cityName
        self.countryCode = countryCode
        self.longitude = longitude
        self.latitude = latitude
        self.state = state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cityName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Location')
        if self.cityName is not None:
            oprot.writeFieldBegin('cityName', TType.STRING, 1)
            oprot.writeString(self.cityName.encode('utf-8') if sys.version_info[0] == 2 else self.cityName)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 2)
            oprot.writeString(self.countryCode.encode('utf-8') if sys.version_info[0] == 2 else self.countryCode)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 3)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 4)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRING, 5)
            oprot.writeString(self.state.encode('utf-8') if sys.version_info[0] == 2 else self.state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SpecialRequest(object):
    """
    Attributes:
     - userId
     - userSmallFlowCode
     - country
     - state
     - other
     - needToHit
    """


    def __init__(self, userId=None, userSmallFlowCode=None, country=None, state=None, other=None, needToHit=None,):
        self.userId = userId
        self.userSmallFlowCode = userSmallFlowCode
        self.country = country
        self.state = state
        self.other = other
        self.needToHit = needToHit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userSmallFlowCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.country = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.other = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.needToHit = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SpecialRequest')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.userSmallFlowCode is not None:
            oprot.writeFieldBegin('userSmallFlowCode', TType.STRING, 2)
            oprot.writeString(self.userSmallFlowCode.encode('utf-8') if sys.version_info[0] == 2 else self.userSmallFlowCode)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 3)
            oprot.writeString(self.country.encode('utf-8') if sys.version_info[0] == 2 else self.country)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRING, 4)
            oprot.writeString(self.state.encode('utf-8') if sys.version_info[0] == 2 else self.state)
            oprot.writeFieldEnd()
        if self.other is not None:
            oprot.writeFieldBegin('other', TType.STRING, 5)
            oprot.writeString(self.other.encode('utf-8') if sys.version_info[0] == 2 else self.other)
            oprot.writeFieldEnd()
        if self.needToHit is not None:
            oprot.writeFieldBegin('needToHit', TType.STRING, 6)
            oprot.writeString(self.needToHit.encode('utf-8') if sys.version_info[0] == 2 else self.needToHit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Request(object):
    """
    Attributes:
     - interfaceName
     - userId
     - cardId
     - num
     - finalId
     - type
     - resourceId
     - resourceType
     - platformId
     - tabId
     - interfaceNewName
     - localFileInfo
     - country
     - area
     - language
     - networkStatus
     - deviceInfo
     - filterId
     - entranceType
     - languageList
     - nextToken
     - searchContent
     - genresList
     - logId
     - serviceName
     - envOption
     - timeSign
     - execTimeSign
     - execTimeDelay
     - debugOption
     - clientVersion
     - browseLangs
     - sortOpt
     - singerList
     - actorList
     - directorList
     - releaseYears
     - redPoint
     - bottomNavigation
     - liveCategoryList
     - location
     - extraLanguageList
     - specialMode
     - publisherList
     - userSmallFlowCode
     - needDownload
     - specialRequest
     - pageNum
     - needPreload
     - fromLorry
    """


    def __init__(self, interfaceName=None, userId=None, cardId=None, num=None, finalId=None, type=None, resourceId=None, resourceType=None, platformId=None, tabId=None, interfaceNewName=None, localFileInfo=None, country=None, area=None, language=None, networkStatus=None, deviceInfo=None, filterId=None, entranceType=None, languageList=None, nextToken=None, searchContent=None, genresList=None, logId=None, serviceName=None, envOption=None, timeSign=None, execTimeSign=None, execTimeDelay=None, debugOption=None, clientVersion=None, browseLangs=None, sortOpt=None, singerList=None, actorList=None, directorList=None, releaseYears=None, redPoint=None, bottomNavigation=None, liveCategoryList=None, location=None, extraLanguageList=None, specialMode=None, publisherList=None, userSmallFlowCode=None, needDownload=None, specialRequest=None, pageNum=None, needPreload=None, fromLorry=None,):
        self.interfaceName = interfaceName
        self.userId = userId
        self.cardId = cardId
        self.num = num
        self.finalId = finalId
        self.type = type
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.platformId = platformId
        self.tabId = tabId
        self.interfaceNewName = interfaceNewName
        self.localFileInfo = localFileInfo
        self.country = country
        self.area = area
        self.language = language
        self.networkStatus = networkStatus
        self.deviceInfo = deviceInfo
        self.filterId = filterId
        self.entranceType = entranceType
        self.languageList = languageList
        self.nextToken = nextToken
        self.searchContent = searchContent
        self.genresList = genresList
        self.logId = logId
        self.serviceName = serviceName
        self.envOption = envOption
        self.timeSign = timeSign
        self.execTimeSign = execTimeSign
        self.execTimeDelay = execTimeDelay
        self.debugOption = debugOption
        self.clientVersion = clientVersion
        self.browseLangs = browseLangs
        self.sortOpt = sortOpt
        self.singerList = singerList
        self.actorList = actorList
        self.directorList = directorList
        self.releaseYears = releaseYears
        self.redPoint = redPoint
        self.bottomNavigation = bottomNavigation
        self.liveCategoryList = liveCategoryList
        self.location = location
        self.extraLanguageList = extraLanguageList
        self.specialMode = specialMode
        self.publisherList = publisherList
        self.userSmallFlowCode = userSmallFlowCode
        self.needDownload = needDownload
        self.specialRequest = specialRequest
        self.pageNum = pageNum
        self.needPreload = needPreload
        self.fromLorry = fromLorry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.interfaceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cardId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.finalId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.type = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.resourceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.resourceType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.platformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.tabId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.interfaceNewName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.localFileInfo = LocalFileInfo()
                    self.localFileInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.country = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.area = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.language = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.networkStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.deviceInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.filterId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.entranceType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.languageList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.languageList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.nextToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.searchContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.LIST:
                    self.genresList = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.genresList.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.logId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.envOption = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.timeSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.execTimeSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRING:
                    self.execTimeDelay = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.debugOption = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.clientVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.LIST:
                    self.browseLangs = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.browseLangs.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.sortOpt = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.LIST:
                    self.singerList = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.singerList.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.LIST:
                    self.actorList = []
                    (_etype27, _size24) = iprot.readListBegin()
                    for _i28 in range(_size24):
                        _elem29 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.actorList.append(_elem29)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.LIST:
                    self.directorList = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.directorList.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.LIST:
                    self.releaseYears = []
                    (_etype39, _size36) = iprot.readListBegin()
                    for _i40 in range(_size36):
                        _elem41 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.releaseYears.append(_elem41)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.STRING:
                    self.redPoint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.STRING:
                    self.bottomNavigation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.LIST:
                    self.liveCategoryList = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.liveCategoryList.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.LIST:
                    self.extraLanguageList = []
                    (_etype51, _size48) = iprot.readListBegin()
                    for _i52 in range(_size48):
                        _elem53 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.extraLanguageList.append(_elem53)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.STRING:
                    self.specialMode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.LIST:
                    self.publisherList = []
                    (_etype57, _size54) = iprot.readListBegin()
                    for _i58 in range(_size54):
                        _elem59 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.publisherList.append(_elem59)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.STRING:
                    self.userSmallFlowCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.BYTE:
                    self.needDownload = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.STRUCT:
                    self.specialRequest = SpecialRequest()
                    self.specialRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.I32:
                    self.pageNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 49:
                if ftype == TType.BYTE:
                    self.needPreload = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.BOOL:
                    self.fromLorry = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Request')
        if self.interfaceName is not None:
            oprot.writeFieldBegin('interfaceName', TType.STRING, 1)
            oprot.writeString(self.interfaceName.encode('utf-8') if sys.version_info[0] == 2 else self.interfaceName)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.cardId is not None:
            oprot.writeFieldBegin('cardId', TType.STRING, 3)
            oprot.writeString(self.cardId.encode('utf-8') if sys.version_info[0] == 2 else self.cardId)
            oprot.writeFieldEnd()
        if self.num is not None:
            oprot.writeFieldBegin('num', TType.I32, 4)
            oprot.writeI32(self.num)
            oprot.writeFieldEnd()
        if self.finalId is not None:
            oprot.writeFieldBegin('finalId', TType.STRING, 5)
            oprot.writeString(self.finalId.encode('utf-8') if sys.version_info[0] == 2 else self.finalId)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.BYTE, 6)
            oprot.writeByte(self.type)
            oprot.writeFieldEnd()
        if self.resourceId is not None:
            oprot.writeFieldBegin('resourceId', TType.STRING, 7)
            oprot.writeString(self.resourceId.encode('utf-8') if sys.version_info[0] == 2 else self.resourceId)
            oprot.writeFieldEnd()
        if self.resourceType is not None:
            oprot.writeFieldBegin('resourceType', TType.STRING, 8)
            oprot.writeString(self.resourceType.encode('utf-8') if sys.version_info[0] == 2 else self.resourceType)
            oprot.writeFieldEnd()
        if self.platformId is not None:
            oprot.writeFieldBegin('platformId', TType.STRING, 9)
            oprot.writeString(self.platformId.encode('utf-8') if sys.version_info[0] == 2 else self.platformId)
            oprot.writeFieldEnd()
        if self.tabId is not None:
            oprot.writeFieldBegin('tabId', TType.STRING, 10)
            oprot.writeString(self.tabId.encode('utf-8') if sys.version_info[0] == 2 else self.tabId)
            oprot.writeFieldEnd()
        if self.interfaceNewName is not None:
            oprot.writeFieldBegin('interfaceNewName', TType.STRING, 11)
            oprot.writeString(self.interfaceNewName.encode('utf-8') if sys.version_info[0] == 2 else self.interfaceNewName)
            oprot.writeFieldEnd()
        if self.localFileInfo is not None:
            oprot.writeFieldBegin('localFileInfo', TType.STRUCT, 12)
            self.localFileInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 13)
            oprot.writeString(self.country.encode('utf-8') if sys.version_info[0] == 2 else self.country)
            oprot.writeFieldEnd()
        if self.area is not None:
            oprot.writeFieldBegin('area', TType.STRING, 14)
            oprot.writeString(self.area.encode('utf-8') if sys.version_info[0] == 2 else self.area)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 15)
            oprot.writeString(self.language.encode('utf-8') if sys.version_info[0] == 2 else self.language)
            oprot.writeFieldEnd()
        if self.networkStatus is not None:
            oprot.writeFieldBegin('networkStatus', TType.STRING, 16)
            oprot.writeString(self.networkStatus.encode('utf-8') if sys.version_info[0] == 2 else self.networkStatus)
            oprot.writeFieldEnd()
        if self.deviceInfo is not None:
            oprot.writeFieldBegin('deviceInfo', TType.STRING, 17)
            oprot.writeString(self.deviceInfo.encode('utf-8') if sys.version_info[0] == 2 else self.deviceInfo)
            oprot.writeFieldEnd()
        if self.filterId is not None:
            oprot.writeFieldBegin('filterId', TType.STRING, 18)
            oprot.writeString(self.filterId.encode('utf-8') if sys.version_info[0] == 2 else self.filterId)
            oprot.writeFieldEnd()
        if self.entranceType is not None:
            oprot.writeFieldBegin('entranceType', TType.STRING, 19)
            oprot.writeString(self.entranceType.encode('utf-8') if sys.version_info[0] == 2 else self.entranceType)
            oprot.writeFieldEnd()
        if self.languageList is not None:
            oprot.writeFieldBegin('languageList', TType.LIST, 20)
            oprot.writeListBegin(TType.STRING, len(self.languageList))
            for iter60 in self.languageList:
                oprot.writeString(iter60.encode('utf-8') if sys.version_info[0] == 2 else iter60)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.nextToken is not None:
            oprot.writeFieldBegin('nextToken', TType.STRING, 21)
            oprot.writeString(self.nextToken.encode('utf-8') if sys.version_info[0] == 2 else self.nextToken)
            oprot.writeFieldEnd()
        if self.searchContent is not None:
            oprot.writeFieldBegin('searchContent', TType.STRING, 22)
            oprot.writeString(self.searchContent.encode('utf-8') if sys.version_info[0] == 2 else self.searchContent)
            oprot.writeFieldEnd()
        if self.genresList is not None:
            oprot.writeFieldBegin('genresList', TType.LIST, 23)
            oprot.writeListBegin(TType.STRING, len(self.genresList))
            for iter61 in self.genresList:
                oprot.writeString(iter61.encode('utf-8') if sys.version_info[0] == 2 else iter61)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.logId is not None:
            oprot.writeFieldBegin('logId', TType.STRING, 24)
            oprot.writeString(self.logId.encode('utf-8') if sys.version_info[0] == 2 else self.logId)
            oprot.writeFieldEnd()
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 25)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.envOption is not None:
            oprot.writeFieldBegin('envOption', TType.STRING, 26)
            oprot.writeString(self.envOption.encode('utf-8') if sys.version_info[0] == 2 else self.envOption)
            oprot.writeFieldEnd()
        if self.timeSign is not None:
            oprot.writeFieldBegin('timeSign', TType.STRING, 27)
            oprot.writeString(self.timeSign.encode('utf-8') if sys.version_info[0] == 2 else self.timeSign)
            oprot.writeFieldEnd()
        if self.execTimeSign is not None:
            oprot.writeFieldBegin('execTimeSign', TType.STRING, 28)
            oprot.writeString(self.execTimeSign.encode('utf-8') if sys.version_info[0] == 2 else self.execTimeSign)
            oprot.writeFieldEnd()
        if self.execTimeDelay is not None:
            oprot.writeFieldBegin('execTimeDelay', TType.STRING, 29)
            oprot.writeString(self.execTimeDelay.encode('utf-8') if sys.version_info[0] == 2 else self.execTimeDelay)
            oprot.writeFieldEnd()
        if self.debugOption is not None:
            oprot.writeFieldBegin('debugOption', TType.STRING, 30)
            oprot.writeString(self.debugOption.encode('utf-8') if sys.version_info[0] == 2 else self.debugOption)
            oprot.writeFieldEnd()
        if self.clientVersion is not None:
            oprot.writeFieldBegin('clientVersion', TType.STRING, 31)
            oprot.writeString(self.clientVersion.encode('utf-8') if sys.version_info[0] == 2 else self.clientVersion)
            oprot.writeFieldEnd()
        if self.browseLangs is not None:
            oprot.writeFieldBegin('browseLangs', TType.LIST, 32)
            oprot.writeListBegin(TType.STRING, len(self.browseLangs))
            for iter62 in self.browseLangs:
                oprot.writeString(iter62.encode('utf-8') if sys.version_info[0] == 2 else iter62)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sortOpt is not None:
            oprot.writeFieldBegin('sortOpt', TType.STRING, 33)
            oprot.writeString(self.sortOpt.encode('utf-8') if sys.version_info[0] == 2 else self.sortOpt)
            oprot.writeFieldEnd()
        if self.singerList is not None:
            oprot.writeFieldBegin('singerList', TType.LIST, 34)
            oprot.writeListBegin(TType.STRING, len(self.singerList))
            for iter63 in self.singerList:
                oprot.writeString(iter63.encode('utf-8') if sys.version_info[0] == 2 else iter63)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.actorList is not None:
            oprot.writeFieldBegin('actorList', TType.LIST, 35)
            oprot.writeListBegin(TType.STRING, len(self.actorList))
            for iter64 in self.actorList:
                oprot.writeString(iter64.encode('utf-8') if sys.version_info[0] == 2 else iter64)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.directorList is not None:
            oprot.writeFieldBegin('directorList', TType.LIST, 36)
            oprot.writeListBegin(TType.STRING, len(self.directorList))
            for iter65 in self.directorList:
                oprot.writeString(iter65.encode('utf-8') if sys.version_info[0] == 2 else iter65)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.releaseYears is not None:
            oprot.writeFieldBegin('releaseYears', TType.LIST, 37)
            oprot.writeListBegin(TType.STRING, len(self.releaseYears))
            for iter66 in self.releaseYears:
                oprot.writeString(iter66.encode('utf-8') if sys.version_info[0] == 2 else iter66)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.redPoint is not None:
            oprot.writeFieldBegin('redPoint', TType.STRING, 38)
            oprot.writeString(self.redPoint.encode('utf-8') if sys.version_info[0] == 2 else self.redPoint)
            oprot.writeFieldEnd()
        if self.bottomNavigation is not None:
            oprot.writeFieldBegin('bottomNavigation', TType.STRING, 39)
            oprot.writeString(self.bottomNavigation.encode('utf-8') if sys.version_info[0] == 2 else self.bottomNavigation)
            oprot.writeFieldEnd()
        if self.liveCategoryList is not None:
            oprot.writeFieldBegin('liveCategoryList', TType.LIST, 40)
            oprot.writeListBegin(TType.STRING, len(self.liveCategoryList))
            for iter67 in self.liveCategoryList:
                oprot.writeString(iter67.encode('utf-8') if sys.version_info[0] == 2 else iter67)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 41)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.extraLanguageList is not None:
            oprot.writeFieldBegin('extraLanguageList', TType.LIST, 42)
            oprot.writeListBegin(TType.STRING, len(self.extraLanguageList))
            for iter68 in self.extraLanguageList:
                oprot.writeString(iter68.encode('utf-8') if sys.version_info[0] == 2 else iter68)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.specialMode is not None:
            oprot.writeFieldBegin('specialMode', TType.STRING, 43)
            oprot.writeString(self.specialMode.encode('utf-8') if sys.version_info[0] == 2 else self.specialMode)
            oprot.writeFieldEnd()
        if self.publisherList is not None:
            oprot.writeFieldBegin('publisherList', TType.LIST, 44)
            oprot.writeListBegin(TType.STRING, len(self.publisherList))
            for iter69 in self.publisherList:
                oprot.writeString(iter69.encode('utf-8') if sys.version_info[0] == 2 else iter69)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.userSmallFlowCode is not None:
            oprot.writeFieldBegin('userSmallFlowCode', TType.STRING, 45)
            oprot.writeString(self.userSmallFlowCode.encode('utf-8') if sys.version_info[0] == 2 else self.userSmallFlowCode)
            oprot.writeFieldEnd()
        if self.needDownload is not None:
            oprot.writeFieldBegin('needDownload', TType.BYTE, 46)
            oprot.writeByte(self.needDownload)
            oprot.writeFieldEnd()
        if self.specialRequest is not None:
            oprot.writeFieldBegin('specialRequest', TType.STRUCT, 47)
            self.specialRequest.write(oprot)
            oprot.writeFieldEnd()
        if self.pageNum is not None:
            oprot.writeFieldBegin('pageNum', TType.I32, 48)
            oprot.writeI32(self.pageNum)
            oprot.writeFieldEnd()
        if self.needPreload is not None:
            oprot.writeFieldBegin('needPreload', TType.BYTE, 49)
            oprot.writeByte(self.needPreload)
            oprot.writeFieldEnd()
        if self.fromLorry is not None:
            oprot.writeFieldBegin('fromLorry', TType.BOOL, 50)
            oprot.writeBool(self.fromLorry)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Genres(object):
    """
    Attributes:
     - genresId
     - genresName
     - backgroundPic
    """


    def __init__(self, genresId=None, genresName=None, backgroundPic=None,):
        self.genresId = genresId
        self.genresName = genresName
        self.backgroundPic = backgroundPic

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.genresId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.genresName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.backgroundPic = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.backgroundPic.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Genres')
        if self.genresId is not None:
            oprot.writeFieldBegin('genresId', TType.STRING, 1)
            oprot.writeString(self.genresId.encode('utf-8') if sys.version_info[0] == 2 else self.genresId)
            oprot.writeFieldEnd()
        if self.genresName is not None:
            oprot.writeFieldBegin('genresName', TType.STRING, 2)
            oprot.writeString(self.genresName.encode('utf-8') if sys.version_info[0] == 2 else self.genresName)
            oprot.writeFieldEnd()
        if self.backgroundPic is not None:
            oprot.writeFieldBegin('backgroundPic', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.backgroundPic))
            for iter76 in self.backgroundPic:
                oprot.writeString(iter76.encode('utf-8') if sys.version_info[0] == 2 else iter76)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Result(object):
    """
    Attributes:
     - id
     - recallSign
     - resultType
     - preLoadTime
     - attachContent
     - languageList
     - releaseDate
     - heat
     - thumbnailUrls
     - labels
     - scoreInfo
     - webUrl
     - title
     - recallIdList
     - thumbnailFormat
     - thumbnailUrlsWebp
    """


    def __init__(self, id=None, recallSign=None, resultType=None, preLoadTime=None, attachContent=None, languageList=None, releaseDate=None, heat=None, thumbnailUrls=None, labels=None, scoreInfo=None, webUrl=None, title=None, recallIdList=None, thumbnailFormat=None, thumbnailUrlsWebp=None,):
        self.id = id
        self.recallSign = recallSign
        self.resultType = resultType
        self.preLoadTime = preLoadTime
        self.attachContent = attachContent
        self.languageList = languageList
        self.releaseDate = releaseDate
        self.heat = heat
        self.thumbnailUrls = thumbnailUrls
        self.labels = labels
        self.scoreInfo = scoreInfo
        self.webUrl = webUrl
        self.title = title
        self.recallIdList = recallIdList
        self.thumbnailFormat = thumbnailFormat
        self.thumbnailUrlsWebp = thumbnailUrlsWebp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.recallSign = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.resultType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.preLoadTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.attachContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.languageList = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.languageList.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.releaseDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.heat = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.thumbnailUrls = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.labels = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.scoreInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.webUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.recallIdList = []
                    (_etype86, _size83) = iprot.readListBegin()
                    for _i87 in range(_size83):
                        _elem88 = iprot.readI32()
                        self.recallIdList.append(_elem88)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.thumbnailFormat = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.thumbnailUrlsWebp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Result')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.recallSign is not None:
            oprot.writeFieldBegin('recallSign', TType.I64, 2)
            oprot.writeI64(self.recallSign)
            oprot.writeFieldEnd()
        if self.resultType is not None:
            oprot.writeFieldBegin('resultType', TType.STRING, 3)
            oprot.writeString(self.resultType.encode('utf-8') if sys.version_info[0] == 2 else self.resultType)
            oprot.writeFieldEnd()
        if self.preLoadTime is not None:
            oprot.writeFieldBegin('preLoadTime', TType.I64, 4)
            oprot.writeI64(self.preLoadTime)
            oprot.writeFieldEnd()
        if self.attachContent is not None:
            oprot.writeFieldBegin('attachContent', TType.STRING, 5)
            oprot.writeString(self.attachContent.encode('utf-8') if sys.version_info[0] == 2 else self.attachContent)
            oprot.writeFieldEnd()
        if self.languageList is not None:
            oprot.writeFieldBegin('languageList', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.languageList))
            for iter89 in self.languageList:
                oprot.writeString(iter89.encode('utf-8') if sys.version_info[0] == 2 else iter89)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.releaseDate is not None:
            oprot.writeFieldBegin('releaseDate', TType.I64, 7)
            oprot.writeI64(self.releaseDate)
            oprot.writeFieldEnd()
        if self.heat is not None:
            oprot.writeFieldBegin('heat', TType.DOUBLE, 8)
            oprot.writeDouble(self.heat)
            oprot.writeFieldEnd()
        if self.thumbnailUrls is not None:
            oprot.writeFieldBegin('thumbnailUrls', TType.STRING, 9)
            oprot.writeString(self.thumbnailUrls.encode('utf-8') if sys.version_info[0] == 2 else self.thumbnailUrls)
            oprot.writeFieldEnd()
        if self.labels is not None:
            oprot.writeFieldBegin('labels', TType.STRING, 10)
            oprot.writeString(self.labels.encode('utf-8') if sys.version_info[0] == 2 else self.labels)
            oprot.writeFieldEnd()
        if self.scoreInfo is not None:
            oprot.writeFieldBegin('scoreInfo', TType.STRING, 11)
            oprot.writeString(self.scoreInfo.encode('utf-8') if sys.version_info[0] == 2 else self.scoreInfo)
            oprot.writeFieldEnd()
        if self.webUrl is not None:
            oprot.writeFieldBegin('webUrl', TType.STRING, 12)
            oprot.writeString(self.webUrl.encode('utf-8') if sys.version_info[0] == 2 else self.webUrl)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 13)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.recallIdList is not None:
            oprot.writeFieldBegin('recallIdList', TType.LIST, 14)
            oprot.writeListBegin(TType.I32, len(self.recallIdList))
            for iter90 in self.recallIdList:
                oprot.writeI32(iter90)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.thumbnailFormat is not None:
            oprot.writeFieldBegin('thumbnailFormat', TType.STRING, 15)
            oprot.writeString(self.thumbnailFormat.encode('utf-8') if sys.version_info[0] == 2 else self.thumbnailFormat)
            oprot.writeFieldEnd()
        if self.thumbnailUrlsWebp is not None:
            oprot.writeFieldBegin('thumbnailUrlsWebp', TType.STRING, 16)
            oprot.writeString(self.thumbnailUrlsWebp.encode('utf-8') if sys.version_info[0] == 2 else self.thumbnailUrlsWebp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Card(object):
    """
    Attributes:
     - cardName
     - cardId
     - listStyle
     - moreStyle
     - icon
     - languageList
     - isRandom
     - cardType
     - description
     - flagName
     - flagColor
     - featuredType
     - originalThumbnail
     - preLoadTime
     - attachContent
     - cardContentType
     - personScore
     - recallType
     - strategyType
     - clientVersionInfo
     - backgroundColorCode
     - lockedOrder
     - seeMore
     - webUrl
     - scoreInfo
     - stateList
     - competitionId
     - cardItemResponse
    """


    def __init__(self, cardName=None, cardId=None, listStyle=None, moreStyle=None, icon=None, languageList=None, isRandom=None, cardType=None, description=None, flagName=None, flagColor=None, featuredType=None, originalThumbnail=None, preLoadTime=None, attachContent=None, cardContentType=None, personScore=None, recallType=None, strategyType=None, clientVersionInfo=None, backgroundColorCode=None, lockedOrder=None, seeMore=None, webUrl=None, scoreInfo=None, stateList=None, competitionId=None, cardItemResponse=None,):
        self.cardName = cardName
        self.cardId = cardId
        self.listStyle = listStyle
        self.moreStyle = moreStyle
        self.icon = icon
        self.languageList = languageList
        self.isRandom = isRandom
        self.cardType = cardType
        self.description = description
        self.flagName = flagName
        self.flagColor = flagColor
        self.featuredType = featuredType
        self.originalThumbnail = originalThumbnail
        self.preLoadTime = preLoadTime
        self.attachContent = attachContent
        self.cardContentType = cardContentType
        self.personScore = personScore
        self.recallType = recallType
        self.strategyType = strategyType
        self.clientVersionInfo = clientVersionInfo
        self.backgroundColorCode = backgroundColorCode
        self.lockedOrder = lockedOrder
        self.seeMore = seeMore
        self.webUrl = webUrl
        self.scoreInfo = scoreInfo
        self.stateList = stateList
        self.competitionId = competitionId
        self.cardItemResponse = cardItemResponse

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cardName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cardId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.listStyle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.moreStyle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.icon = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.languageList = []
                    (_etype94, _size91) = iprot.readListBegin()
                    for _i95 in range(_size91):
                        _elem96 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.languageList.append(_elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.isRandom = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.cardType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.flagName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.flagColor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.featuredType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.originalThumbnail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.preLoadTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.attachContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.cardContentType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.DOUBLE:
                    self.personScore = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.recallType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.strategyType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.clientVersionInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.backgroundColorCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.lockedOrder = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.seeMore = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.webUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.scoreInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.LIST:
                    self.stateList = []
                    (_etype100, _size97) = iprot.readListBegin()
                    for _i101 in range(_size97):
                        _elem102 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.stateList.append(_elem102)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.competitionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRUCT:
                    self.cardItemResponse = Response()
                    self.cardItemResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Card')
        if self.cardName is not None:
            oprot.writeFieldBegin('cardName', TType.STRING, 1)
            oprot.writeString(self.cardName.encode('utf-8') if sys.version_info[0] == 2 else self.cardName)
            oprot.writeFieldEnd()
        if self.cardId is not None:
            oprot.writeFieldBegin('cardId', TType.STRING, 2)
            oprot.writeString(self.cardId.encode('utf-8') if sys.version_info[0] == 2 else self.cardId)
            oprot.writeFieldEnd()
        if self.listStyle is not None:
            oprot.writeFieldBegin('listStyle', TType.STRING, 3)
            oprot.writeString(self.listStyle.encode('utf-8') if sys.version_info[0] == 2 else self.listStyle)
            oprot.writeFieldEnd()
        if self.moreStyle is not None:
            oprot.writeFieldBegin('moreStyle', TType.STRING, 4)
            oprot.writeString(self.moreStyle.encode('utf-8') if sys.version_info[0] == 2 else self.moreStyle)
            oprot.writeFieldEnd()
        if self.icon is not None:
            oprot.writeFieldBegin('icon', TType.STRING, 5)
            oprot.writeString(self.icon.encode('utf-8') if sys.version_info[0] == 2 else self.icon)
            oprot.writeFieldEnd()
        if self.languageList is not None:
            oprot.writeFieldBegin('languageList', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.languageList))
            for iter103 in self.languageList:
                oprot.writeString(iter103.encode('utf-8') if sys.version_info[0] == 2 else iter103)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.isRandom is not None:
            oprot.writeFieldBegin('isRandom', TType.BOOL, 7)
            oprot.writeBool(self.isRandom)
            oprot.writeFieldEnd()
        if self.cardType is not None:
            oprot.writeFieldBegin('cardType', TType.I32, 8)
            oprot.writeI32(self.cardType)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 9)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.flagName is not None:
            oprot.writeFieldBegin('flagName', TType.STRING, 10)
            oprot.writeString(self.flagName.encode('utf-8') if sys.version_info[0] == 2 else self.flagName)
            oprot.writeFieldEnd()
        if self.flagColor is not None:
            oprot.writeFieldBegin('flagColor', TType.STRING, 11)
            oprot.writeString(self.flagColor.encode('utf-8') if sys.version_info[0] == 2 else self.flagColor)
            oprot.writeFieldEnd()
        if self.featuredType is not None:
            oprot.writeFieldBegin('featuredType', TType.STRING, 12)
            oprot.writeString(self.featuredType.encode('utf-8') if sys.version_info[0] == 2 else self.featuredType)
            oprot.writeFieldEnd()
        if self.originalThumbnail is not None:
            oprot.writeFieldBegin('originalThumbnail', TType.STRING, 13)
            oprot.writeString(self.originalThumbnail.encode('utf-8') if sys.version_info[0] == 2 else self.originalThumbnail)
            oprot.writeFieldEnd()
        if self.preLoadTime is not None:
            oprot.writeFieldBegin('preLoadTime', TType.I64, 14)
            oprot.writeI64(self.preLoadTime)
            oprot.writeFieldEnd()
        if self.attachContent is not None:
            oprot.writeFieldBegin('attachContent', TType.STRING, 15)
            oprot.writeString(self.attachContent.encode('utf-8') if sys.version_info[0] == 2 else self.attachContent)
            oprot.writeFieldEnd()
        if self.cardContentType is not None:
            oprot.writeFieldBegin('cardContentType', TType.STRING, 16)
            oprot.writeString(self.cardContentType.encode('utf-8') if sys.version_info[0] == 2 else self.cardContentType)
            oprot.writeFieldEnd()
        if self.personScore is not None:
            oprot.writeFieldBegin('personScore', TType.DOUBLE, 17)
            oprot.writeDouble(self.personScore)
            oprot.writeFieldEnd()
        if self.recallType is not None:
            oprot.writeFieldBegin('recallType', TType.STRING, 18)
            oprot.writeString(self.recallType.encode('utf-8') if sys.version_info[0] == 2 else self.recallType)
            oprot.writeFieldEnd()
        if self.strategyType is not None:
            oprot.writeFieldBegin('strategyType', TType.STRING, 19)
            oprot.writeString(self.strategyType.encode('utf-8') if sys.version_info[0] == 2 else self.strategyType)
            oprot.writeFieldEnd()
        if self.clientVersionInfo is not None:
            oprot.writeFieldBegin('clientVersionInfo', TType.STRING, 20)
            oprot.writeString(self.clientVersionInfo.encode('utf-8') if sys.version_info[0] == 2 else self.clientVersionInfo)
            oprot.writeFieldEnd()
        if self.backgroundColorCode is not None:
            oprot.writeFieldBegin('backgroundColorCode', TType.STRING, 21)
            oprot.writeString(self.backgroundColorCode.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundColorCode)
            oprot.writeFieldEnd()
        if self.lockedOrder is not None:
            oprot.writeFieldBegin('lockedOrder', TType.I32, 22)
            oprot.writeI32(self.lockedOrder)
            oprot.writeFieldEnd()
        if self.seeMore is not None:
            oprot.writeFieldBegin('seeMore', TType.STRING, 23)
            oprot.writeString(self.seeMore.encode('utf-8') if sys.version_info[0] == 2 else self.seeMore)
            oprot.writeFieldEnd()
        if self.webUrl is not None:
            oprot.writeFieldBegin('webUrl', TType.STRING, 24)
            oprot.writeString(self.webUrl.encode('utf-8') if sys.version_info[0] == 2 else self.webUrl)
            oprot.writeFieldEnd()
        if self.scoreInfo is not None:
            oprot.writeFieldBegin('scoreInfo', TType.STRING, 25)
            oprot.writeString(self.scoreInfo.encode('utf-8') if sys.version_info[0] == 2 else self.scoreInfo)
            oprot.writeFieldEnd()
        if self.stateList is not None:
            oprot.writeFieldBegin('stateList', TType.LIST, 26)
            oprot.writeListBegin(TType.STRING, len(self.stateList))
            for iter104 in self.stateList:
                oprot.writeString(iter104.encode('utf-8') if sys.version_info[0] == 2 else iter104)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.competitionId is not None:
            oprot.writeFieldBegin('competitionId', TType.STRING, 27)
            oprot.writeString(self.competitionId.encode('utf-8') if sys.version_info[0] == 2 else self.competitionId)
            oprot.writeFieldEnd()
        if self.cardItemResponse is not None:
            oprot.writeFieldBegin('cardItemResponse', TType.STRUCT, 28)
            self.cardItemResponse.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Tabs(object):
    """
    Attributes:
     - tabName
     - tabId
     - cardList
     - style
     - nextToken
     - attachContent
     - clientVersionInfo
     - bottomNavigation
     - lockInfo
     - countries
     - order
     - relationCardId
     - advertiseId
    """


    def __init__(self, tabName=None, tabId=None, cardList=None, style=None, nextToken=None, attachContent=None, clientVersionInfo=None, bottomNavigation=None, lockInfo=None, countries=None, order=None, relationCardId=None, advertiseId=None,):
        self.tabName = tabName
        self.tabId = tabId
        self.cardList = cardList
        self.style = style
        self.nextToken = nextToken
        self.attachContent = attachContent
        self.clientVersionInfo = clientVersionInfo
        self.bottomNavigation = bottomNavigation
        self.lockInfo = lockInfo
        self.countries = countries
        self.order = order
        self.relationCardId = relationCardId
        self.advertiseId = advertiseId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tabName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tabId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.cardList = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = Card()
                        _elem110.read(iprot)
                        self.cardList.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.style = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.nextToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.attachContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.clientVersionInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.bottomNavigation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.lockInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.countries = []
                    (_etype114, _size111) = iprot.readListBegin()
                    for _i115 in range(_size111):
                        _elem116 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.countries.append(_elem116)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BYTE:
                    self.order = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.relationCardId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.advertiseId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Tabs')
        if self.tabName is not None:
            oprot.writeFieldBegin('tabName', TType.STRING, 1)
            oprot.writeString(self.tabName.encode('utf-8') if sys.version_info[0] == 2 else self.tabName)
            oprot.writeFieldEnd()
        if self.tabId is not None:
            oprot.writeFieldBegin('tabId', TType.STRING, 2)
            oprot.writeString(self.tabId.encode('utf-8') if sys.version_info[0] == 2 else self.tabId)
            oprot.writeFieldEnd()
        if self.cardList is not None:
            oprot.writeFieldBegin('cardList', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.cardList))
            for iter117 in self.cardList:
                iter117.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.style is not None:
            oprot.writeFieldBegin('style', TType.STRING, 4)
            oprot.writeString(self.style.encode('utf-8') if sys.version_info[0] == 2 else self.style)
            oprot.writeFieldEnd()
        if self.nextToken is not None:
            oprot.writeFieldBegin('nextToken', TType.STRING, 5)
            oprot.writeString(self.nextToken.encode('utf-8') if sys.version_info[0] == 2 else self.nextToken)
            oprot.writeFieldEnd()
        if self.attachContent is not None:
            oprot.writeFieldBegin('attachContent', TType.STRING, 6)
            oprot.writeString(self.attachContent.encode('utf-8') if sys.version_info[0] == 2 else self.attachContent)
            oprot.writeFieldEnd()
        if self.clientVersionInfo is not None:
            oprot.writeFieldBegin('clientVersionInfo', TType.STRING, 7)
            oprot.writeString(self.clientVersionInfo.encode('utf-8') if sys.version_info[0] == 2 else self.clientVersionInfo)
            oprot.writeFieldEnd()
        if self.bottomNavigation is not None:
            oprot.writeFieldBegin('bottomNavigation', TType.STRING, 8)
            oprot.writeString(self.bottomNavigation.encode('utf-8') if sys.version_info[0] == 2 else self.bottomNavigation)
            oprot.writeFieldEnd()
        if self.lockInfo is not None:
            oprot.writeFieldBegin('lockInfo', TType.STRING, 9)
            oprot.writeString(self.lockInfo.encode('utf-8') if sys.version_info[0] == 2 else self.lockInfo)
            oprot.writeFieldEnd()
        if self.countries is not None:
            oprot.writeFieldBegin('countries', TType.LIST, 10)
            oprot.writeListBegin(TType.STRING, len(self.countries))
            for iter118 in self.countries:
                oprot.writeString(iter118.encode('utf-8') if sys.version_info[0] == 2 else iter118)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.BYTE, 11)
            oprot.writeByte(self.order)
            oprot.writeFieldEnd()
        if self.relationCardId is not None:
            oprot.writeFieldBegin('relationCardId', TType.STRING, 12)
            oprot.writeString(self.relationCardId.encode('utf-8') if sys.version_info[0] == 2 else self.relationCardId)
            oprot.writeFieldEnd()
        if self.advertiseId is not None:
            oprot.writeFieldBegin('advertiseId', TType.STRING, 13)
            oprot.writeString(self.advertiseId.encode('utf-8') if sys.version_info[0] == 2 else self.advertiseId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Banner(object):
    """
    Attributes:
     - bannerName
     - bannerType
     - headPicture
     - description
     - subTitle
     - additionalInfos
     - order
     - bannerId
     - preLoadTime
     - attachContent
     - languageList
     - scoreInfo
     - webUrl
     - supportStates
     - thumbnailFormat
     - thumbnailUrlsWebp
    """


    def __init__(self, bannerName=None, bannerType=None, headPicture=None, description=None, subTitle=None, additionalInfos=None, order=None, bannerId=None, preLoadTime=None, attachContent=None, languageList=None, scoreInfo=None, webUrl=None, supportStates=None, thumbnailFormat=None, thumbnailUrlsWebp=None,):
        self.bannerName = bannerName
        self.bannerType = bannerType
        self.headPicture = headPicture
        self.description = description
        self.subTitle = subTitle
        self.additionalInfos = additionalInfos
        self.order = order
        self.bannerId = bannerId
        self.preLoadTime = preLoadTime
        self.attachContent = attachContent
        self.languageList = languageList
        self.scoreInfo = scoreInfo
        self.webUrl = webUrl
        self.supportStates = supportStates
        self.thumbnailFormat = thumbnailFormat
        self.thumbnailUrlsWebp = thumbnailUrlsWebp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.bannerName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.bannerType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.headPicture = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.subTitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.additionalInfos = []
                    (_etype122, _size119) = iprot.readListBegin()
                    for _i123 in range(_size119):
                        _elem124 = AdditionalInfo()
                        _elem124.read(iprot)
                        self.additionalInfos.append(_elem124)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.order = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.bannerId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.preLoadTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.attachContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.languageList = []
                    (_etype128, _size125) = iprot.readListBegin()
                    for _i129 in range(_size125):
                        _elem130 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.languageList.append(_elem130)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.scoreInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.webUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.supportStates = []
                    (_etype134, _size131) = iprot.readListBegin()
                    for _i135 in range(_size131):
                        _elem136 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.supportStates.append(_elem136)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.thumbnailFormat = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.thumbnailUrlsWebp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Banner')
        if self.bannerName is not None:
            oprot.writeFieldBegin('bannerName', TType.STRING, 1)
            oprot.writeString(self.bannerName.encode('utf-8') if sys.version_info[0] == 2 else self.bannerName)
            oprot.writeFieldEnd()
        if self.bannerType is not None:
            oprot.writeFieldBegin('bannerType', TType.STRING, 2)
            oprot.writeString(self.bannerType.encode('utf-8') if sys.version_info[0] == 2 else self.bannerType)
            oprot.writeFieldEnd()
        if self.headPicture is not None:
            oprot.writeFieldBegin('headPicture', TType.STRING, 3)
            oprot.writeString(self.headPicture.encode('utf-8') if sys.version_info[0] == 2 else self.headPicture)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.subTitle is not None:
            oprot.writeFieldBegin('subTitle', TType.STRING, 5)
            oprot.writeString(self.subTitle.encode('utf-8') if sys.version_info[0] == 2 else self.subTitle)
            oprot.writeFieldEnd()
        if self.additionalInfos is not None:
            oprot.writeFieldBegin('additionalInfos', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.additionalInfos))
            for iter137 in self.additionalInfos:
                iter137.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.order is not None:
            oprot.writeFieldBegin('order', TType.I32, 7)
            oprot.writeI32(self.order)
            oprot.writeFieldEnd()
        if self.bannerId is not None:
            oprot.writeFieldBegin('bannerId', TType.STRING, 8)
            oprot.writeString(self.bannerId.encode('utf-8') if sys.version_info[0] == 2 else self.bannerId)
            oprot.writeFieldEnd()
        if self.preLoadTime is not None:
            oprot.writeFieldBegin('preLoadTime', TType.I64, 9)
            oprot.writeI64(self.preLoadTime)
            oprot.writeFieldEnd()
        if self.attachContent is not None:
            oprot.writeFieldBegin('attachContent', TType.STRING, 10)
            oprot.writeString(self.attachContent.encode('utf-8') if sys.version_info[0] == 2 else self.attachContent)
            oprot.writeFieldEnd()
        if self.languageList is not None:
            oprot.writeFieldBegin('languageList', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.languageList))
            for iter138 in self.languageList:
                oprot.writeString(iter138.encode('utf-8') if sys.version_info[0] == 2 else iter138)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.scoreInfo is not None:
            oprot.writeFieldBegin('scoreInfo', TType.STRING, 12)
            oprot.writeString(self.scoreInfo.encode('utf-8') if sys.version_info[0] == 2 else self.scoreInfo)
            oprot.writeFieldEnd()
        if self.webUrl is not None:
            oprot.writeFieldBegin('webUrl', TType.STRING, 13)
            oprot.writeString(self.webUrl.encode('utf-8') if sys.version_info[0] == 2 else self.webUrl)
            oprot.writeFieldEnd()
        if self.supportStates is not None:
            oprot.writeFieldBegin('supportStates', TType.LIST, 14)
            oprot.writeListBegin(TType.STRING, len(self.supportStates))
            for iter139 in self.supportStates:
                oprot.writeString(iter139.encode('utf-8') if sys.version_info[0] == 2 else iter139)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.thumbnailFormat is not None:
            oprot.writeFieldBegin('thumbnailFormat', TType.STRING, 15)
            oprot.writeString(self.thumbnailFormat.encode('utf-8') if sys.version_info[0] == 2 else self.thumbnailFormat)
            oprot.writeFieldEnd()
        if self.thumbnailUrlsWebp is not None:
            oprot.writeFieldBegin('thumbnailUrlsWebp', TType.STRING, 16)
            oprot.writeString(self.thumbnailUrlsWebp.encode('utf-8') if sys.version_info[0] == 2 else self.thumbnailUrlsWebp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Response(object):
    """
    Attributes:
     - resultList
     - smallFlowTag
     - flag
     - requestChannel
     - responseType
     - listStyle
     - moreStyle
     - hasHead
     - hasTail
     - disableCache
     - logId
     - serviceName
     - resStatus
     - debugInfo
     - tabList
     - bannerList
     - cardList
     - errorNo
     - totalNum
     - filterReasonList
     - requestIssue
     - totalTime
    """


    def __init__(self, resultList=None, smallFlowTag=None, flag=None, requestChannel=None, responseType=None, listStyle=None, moreStyle=None, hasHead=None, hasTail=None, disableCache=None, logId=None, serviceName=None, resStatus=None, debugInfo=None, tabList=None, bannerList=None, cardList=None, errorNo=None, totalNum=None, filterReasonList=None, requestIssue=None, totalTime=None,):
        self.resultList = resultList
        self.smallFlowTag = smallFlowTag
        self.flag = flag
        self.requestChannel = requestChannel
        self.responseType = responseType
        self.listStyle = listStyle
        self.moreStyle = moreStyle
        self.hasHead = hasHead
        self.hasTail = hasTail
        self.disableCache = disableCache
        self.logId = logId
        self.serviceName = serviceName
        self.resStatus = resStatus
        self.debugInfo = debugInfo
        self.tabList = tabList
        self.bannerList = bannerList
        self.cardList = cardList
        self.errorNo = errorNo
        self.totalNum = totalNum
        self.filterReasonList = filterReasonList
        self.requestIssue = requestIssue
        self.totalTime = totalTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.resultList = []
                    (_etype143, _size140) = iprot.readListBegin()
                    for _i144 in range(_size140):
                        _elem145 = Result()
                        _elem145.read(iprot)
                        self.resultList.append(_elem145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.smallFlowTag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.flag = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.requestChannel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.responseType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.listStyle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.moreStyle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BYTE:
                    self.hasHead = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BYTE:
                    self.hasTail = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.disableCache = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.logId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.resStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.debugInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.tabList = []
                    (_etype149, _size146) = iprot.readListBegin()
                    for _i150 in range(_size146):
                        _elem151 = Tabs()
                        _elem151.read(iprot)
                        self.tabList.append(_elem151)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.bannerList = []
                    (_etype155, _size152) = iprot.readListBegin()
                    for _i156 in range(_size152):
                        _elem157 = Banner()
                        _elem157.read(iprot)
                        self.bannerList.append(_elem157)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.cardList = []
                    (_etype161, _size158) = iprot.readListBegin()
                    for _i162 in range(_size158):
                        _elem163 = Card()
                        _elem163.read(iprot)
                        self.cardList.append(_elem163)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.errorNo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.totalNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.filterReasonList = []
                    (_etype167, _size164) = iprot.readListBegin()
                    for _i168 in range(_size164):
                        _elem169 = FiltrationReason()
                        _elem169.read(iprot)
                        self.filterReasonList.append(_elem169)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.LIST:
                    self.requestIssue = []
                    (_etype173, _size170) = iprot.readListBegin()
                    for _i174 in range(_size170):
                        _elem175 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.requestIssue.append(_elem175)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.totalTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Response')
        if self.resultList is not None:
            oprot.writeFieldBegin('resultList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.resultList))
            for iter176 in self.resultList:
                iter176.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.smallFlowTag is not None:
            oprot.writeFieldBegin('smallFlowTag', TType.STRING, 2)
            oprot.writeString(self.smallFlowTag.encode('utf-8') if sys.version_info[0] == 2 else self.smallFlowTag)
            oprot.writeFieldEnd()
        if self.flag is not None:
            oprot.writeFieldBegin('flag', TType.I16, 3)
            oprot.writeI16(self.flag)
            oprot.writeFieldEnd()
        if self.requestChannel is not None:
            oprot.writeFieldBegin('requestChannel', TType.STRING, 4)
            oprot.writeString(self.requestChannel.encode('utf-8') if sys.version_info[0] == 2 else self.requestChannel)
            oprot.writeFieldEnd()
        if self.responseType is not None:
            oprot.writeFieldBegin('responseType', TType.STRING, 5)
            oprot.writeString(self.responseType.encode('utf-8') if sys.version_info[0] == 2 else self.responseType)
            oprot.writeFieldEnd()
        if self.listStyle is not None:
            oprot.writeFieldBegin('listStyle', TType.STRING, 6)
            oprot.writeString(self.listStyle.encode('utf-8') if sys.version_info[0] == 2 else self.listStyle)
            oprot.writeFieldEnd()
        if self.moreStyle is not None:
            oprot.writeFieldBegin('moreStyle', TType.STRING, 7)
            oprot.writeString(self.moreStyle.encode('utf-8') if sys.version_info[0] == 2 else self.moreStyle)
            oprot.writeFieldEnd()
        if self.hasHead is not None:
            oprot.writeFieldBegin('hasHead', TType.BYTE, 8)
            oprot.writeByte(self.hasHead)
            oprot.writeFieldEnd()
        if self.hasTail is not None:
            oprot.writeFieldBegin('hasTail', TType.BYTE, 9)
            oprot.writeByte(self.hasTail)
            oprot.writeFieldEnd()
        if self.disableCache is not None:
            oprot.writeFieldBegin('disableCache', TType.BOOL, 10)
            oprot.writeBool(self.disableCache)
            oprot.writeFieldEnd()
        if self.logId is not None:
            oprot.writeFieldBegin('logId', TType.STRING, 11)
            oprot.writeString(self.logId.encode('utf-8') if sys.version_info[0] == 2 else self.logId)
            oprot.writeFieldEnd()
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 12)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.resStatus is not None:
            oprot.writeFieldBegin('resStatus', TType.STRING, 13)
            oprot.writeString(self.resStatus.encode('utf-8') if sys.version_info[0] == 2 else self.resStatus)
            oprot.writeFieldEnd()
        if self.debugInfo is not None:
            oprot.writeFieldBegin('debugInfo', TType.STRING, 14)
            oprot.writeString(self.debugInfo.encode('utf-8') if sys.version_info[0] == 2 else self.debugInfo)
            oprot.writeFieldEnd()
        if self.tabList is not None:
            oprot.writeFieldBegin('tabList', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.tabList))
            for iter177 in self.tabList:
                iter177.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bannerList is not None:
            oprot.writeFieldBegin('bannerList', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.bannerList))
            for iter178 in self.bannerList:
                iter178.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cardList is not None:
            oprot.writeFieldBegin('cardList', TType.LIST, 17)
            oprot.writeListBegin(TType.STRUCT, len(self.cardList))
            for iter179 in self.cardList:
                iter179.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.errorNo is not None:
            oprot.writeFieldBegin('errorNo', TType.STRING, 18)
            oprot.writeString(self.errorNo.encode('utf-8') if sys.version_info[0] == 2 else self.errorNo)
            oprot.writeFieldEnd()
        if self.totalNum is not None:
            oprot.writeFieldBegin('totalNum', TType.STRING, 19)
            oprot.writeString(self.totalNum.encode('utf-8') if sys.version_info[0] == 2 else self.totalNum)
            oprot.writeFieldEnd()
        if self.filterReasonList is not None:
            oprot.writeFieldBegin('filterReasonList', TType.LIST, 20)
            oprot.writeListBegin(TType.STRUCT, len(self.filterReasonList))
            for iter180 in self.filterReasonList:
                iter180.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.requestIssue is not None:
            oprot.writeFieldBegin('requestIssue', TType.LIST, 21)
            oprot.writeListBegin(TType.STRING, len(self.requestIssue))
            for iter181 in self.requestIssue:
                oprot.writeString(iter181.encode('utf-8') if sys.version_info[0] == 2 else iter181)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.totalTime is not None:
            oprot.writeFieldBegin('totalTime', TType.STRING, 22)
            oprot.writeString(self.totalTime.encode('utf-8') if sys.version_info[0] == 2 else self.totalTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OfflineRequest(object):
    """
    Attributes:
     - interfaceName
     - userId
     - platformId
     - languageList
     - logId
     - serviceName
     - timeSign
     - execTimeSign
     - execTimeDelay
     - clientVersion
     - offlineFolder
     - specialMode
     - userSmallFlowCode
     - specialRequest
    """


    def __init__(self, interfaceName=None, userId=None, platformId=None, languageList=None, logId=None, serviceName=None, timeSign=None, execTimeSign=None, execTimeDelay=None, clientVersion=None, offlineFolder=None, specialMode=None, userSmallFlowCode=None, specialRequest=None,):
        self.interfaceName = interfaceName
        self.userId = userId
        self.platformId = platformId
        self.languageList = languageList
        self.logId = logId
        self.serviceName = serviceName
        self.timeSign = timeSign
        self.execTimeSign = execTimeSign
        self.execTimeDelay = execTimeDelay
        self.clientVersion = clientVersion
        self.offlineFolder = offlineFolder
        self.specialMode = specialMode
        self.userSmallFlowCode = userSmallFlowCode
        self.specialRequest = specialRequest

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.interfaceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.platformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.languageList = []
                    (_etype185, _size182) = iprot.readListBegin()
                    for _i186 in range(_size182):
                        _elem187 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.languageList.append(_elem187)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.logId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.timeSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.execTimeSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.execTimeDelay = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.clientVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.offlineFolder = []
                    (_etype191, _size188) = iprot.readListBegin()
                    for _i192 in range(_size188):
                        _elem193 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.offlineFolder.append(_elem193)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.specialMode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.userSmallFlowCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.specialRequest = SpecialRequest()
                    self.specialRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OfflineRequest')
        if self.interfaceName is not None:
            oprot.writeFieldBegin('interfaceName', TType.STRING, 1)
            oprot.writeString(self.interfaceName.encode('utf-8') if sys.version_info[0] == 2 else self.interfaceName)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.platformId is not None:
            oprot.writeFieldBegin('platformId', TType.STRING, 3)
            oprot.writeString(self.platformId.encode('utf-8') if sys.version_info[0] == 2 else self.platformId)
            oprot.writeFieldEnd()
        if self.languageList is not None:
            oprot.writeFieldBegin('languageList', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.languageList))
            for iter194 in self.languageList:
                oprot.writeString(iter194.encode('utf-8') if sys.version_info[0] == 2 else iter194)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.logId is not None:
            oprot.writeFieldBegin('logId', TType.STRING, 5)
            oprot.writeString(self.logId.encode('utf-8') if sys.version_info[0] == 2 else self.logId)
            oprot.writeFieldEnd()
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 6)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.timeSign is not None:
            oprot.writeFieldBegin('timeSign', TType.STRING, 7)
            oprot.writeString(self.timeSign.encode('utf-8') if sys.version_info[0] == 2 else self.timeSign)
            oprot.writeFieldEnd()
        if self.execTimeSign is not None:
            oprot.writeFieldBegin('execTimeSign', TType.STRING, 8)
            oprot.writeString(self.execTimeSign.encode('utf-8') if sys.version_info[0] == 2 else self.execTimeSign)
            oprot.writeFieldEnd()
        if self.execTimeDelay is not None:
            oprot.writeFieldBegin('execTimeDelay', TType.STRING, 9)
            oprot.writeString(self.execTimeDelay.encode('utf-8') if sys.version_info[0] == 2 else self.execTimeDelay)
            oprot.writeFieldEnd()
        if self.clientVersion is not None:
            oprot.writeFieldBegin('clientVersion', TType.STRING, 10)
            oprot.writeString(self.clientVersion.encode('utf-8') if sys.version_info[0] == 2 else self.clientVersion)
            oprot.writeFieldEnd()
        if self.offlineFolder is not None:
            oprot.writeFieldBegin('offlineFolder', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.offlineFolder))
            for iter195 in self.offlineFolder:
                oprot.writeString(iter195.encode('utf-8') if sys.version_info[0] == 2 else iter195)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.specialMode is not None:
            oprot.writeFieldBegin('specialMode', TType.STRING, 12)
            oprot.writeString(self.specialMode.encode('utf-8') if sys.version_info[0] == 2 else self.specialMode)
            oprot.writeFieldEnd()
        if self.userSmallFlowCode is not None:
            oprot.writeFieldBegin('userSmallFlowCode', TType.STRING, 13)
            oprot.writeString(self.userSmallFlowCode.encode('utf-8') if sys.version_info[0] == 2 else self.userSmallFlowCode)
            oprot.writeFieldEnd()
        if self.specialRequest is not None:
            oprot.writeFieldBegin('specialRequest', TType.STRUCT, 14)
            self.specialRequest.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OfflineResponse(object):
    """
    Attributes:
     - offlineResultList
     - smallFlowTag
     - responseType
     - disableCache
     - logId
     - serviceName
     - resStatus
     - errorNo
    """


    def __init__(self, offlineResultList=None, smallFlowTag=None, responseType=None, disableCache=None, logId=None, serviceName=None, resStatus=None, errorNo=None,):
        self.offlineResultList = offlineResultList
        self.smallFlowTag = smallFlowTag
        self.responseType = responseType
        self.disableCache = disableCache
        self.logId = logId
        self.serviceName = serviceName
        self.resStatus = resStatus
        self.errorNo = errorNo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.offlineResultList = []
                    (_etype199, _size196) = iprot.readListBegin()
                    for _i200 in range(_size196):
                        _elem201 = OfflineResult()
                        _elem201.read(iprot)
                        self.offlineResultList.append(_elem201)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.smallFlowTag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.responseType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.disableCache = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.logId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.resStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.errorNo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OfflineResponse')
        if self.offlineResultList is not None:
            oprot.writeFieldBegin('offlineResultList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.offlineResultList))
            for iter202 in self.offlineResultList:
                iter202.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.smallFlowTag is not None:
            oprot.writeFieldBegin('smallFlowTag', TType.STRING, 2)
            oprot.writeString(self.smallFlowTag.encode('utf-8') if sys.version_info[0] == 2 else self.smallFlowTag)
            oprot.writeFieldEnd()
        if self.responseType is not None:
            oprot.writeFieldBegin('responseType', TType.STRING, 3)
            oprot.writeString(self.responseType.encode('utf-8') if sys.version_info[0] == 2 else self.responseType)
            oprot.writeFieldEnd()
        if self.disableCache is not None:
            oprot.writeFieldBegin('disableCache', TType.BOOL, 4)
            oprot.writeBool(self.disableCache)
            oprot.writeFieldEnd()
        if self.logId is not None:
            oprot.writeFieldBegin('logId', TType.STRING, 5)
            oprot.writeString(self.logId.encode('utf-8') if sys.version_info[0] == 2 else self.logId)
            oprot.writeFieldEnd()
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 6)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.resStatus is not None:
            oprot.writeFieldBegin('resStatus', TType.STRING, 7)
            oprot.writeString(self.resStatus.encode('utf-8') if sys.version_info[0] == 2 else self.resStatus)
            oprot.writeFieldEnd()
        if self.errorNo is not None:
            oprot.writeFieldBegin('errorNo', TType.STRING, 8)
            oprot.writeString(self.errorNo.encode('utf-8') if sys.version_info[0] == 2 else self.errorNo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OfflineResult(object):
    """
    Attributes:
     - positionType
     - position
     - title
     - subtitle
     - type
     - id
    """


    def __init__(self, positionType=None, position=None, title=None, subtitle=None, type=None, id=None,):
        self.positionType = positionType
        self.position = position
        self.title = title
        self.subtitle = subtitle
        self.type = type
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.positionType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.position = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.subtitle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OfflineResult')
        if self.positionType is not None:
            oprot.writeFieldBegin('positionType', TType.STRING, 1)
            oprot.writeString(self.positionType.encode('utf-8') if sys.version_info[0] == 2 else self.positionType)
            oprot.writeFieldEnd()
        if self.position is not None:
            oprot.writeFieldBegin('position', TType.STRING, 2)
            oprot.writeString(self.position.encode('utf-8') if sys.version_info[0] == 2 else self.position)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.subtitle is not None:
            oprot.writeFieldBegin('subtitle', TType.STRING, 4)
            oprot.writeString(self.subtitle.encode('utf-8') if sys.version_info[0] == 2 else self.subtitle)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 5)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 6)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdRequest(object):
    """
    Attributes:
     - interfaceName
     - userId
     - resourceId
     - resourceType
     - platformId
     - clientVersion
     - logId
     - serviceName
     - languageList
     - country
     - timeSign
     - execTimeSign
     - execTimeDelay
     - debugOption
     - location
     - specialRequest
    """


    def __init__(self, interfaceName=None, userId=None, resourceId=None, resourceType=None, platformId=None, clientVersion=None, logId=None, serviceName=None, languageList=None, country=None, timeSign=None, execTimeSign=None, execTimeDelay=None, debugOption=None, location=None, specialRequest=None,):
        self.interfaceName = interfaceName
        self.userId = userId
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.platformId = platformId
        self.clientVersion = clientVersion
        self.logId = logId
        self.serviceName = serviceName
        self.languageList = languageList
        self.country = country
        self.timeSign = timeSign
        self.execTimeSign = execTimeSign
        self.execTimeDelay = execTimeDelay
        self.debugOption = debugOption
        self.location = location
        self.specialRequest = specialRequest

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.interfaceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.resourceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.resourceType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.platformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.clientVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.logId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.languageList = []
                    (_etype206, _size203) = iprot.readListBegin()
                    for _i207 in range(_size203):
                        _elem208 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.languageList.append(_elem208)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.country = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.timeSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.execTimeSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.execTimeDelay = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.debugOption = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRUCT:
                    self.specialRequest = SpecialRequest()
                    self.specialRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdRequest')
        if self.interfaceName is not None:
            oprot.writeFieldBegin('interfaceName', TType.STRING, 1)
            oprot.writeString(self.interfaceName.encode('utf-8') if sys.version_info[0] == 2 else self.interfaceName)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.resourceId is not None:
            oprot.writeFieldBegin('resourceId', TType.STRING, 3)
            oprot.writeString(self.resourceId.encode('utf-8') if sys.version_info[0] == 2 else self.resourceId)
            oprot.writeFieldEnd()
        if self.resourceType is not None:
            oprot.writeFieldBegin('resourceType', TType.STRING, 4)
            oprot.writeString(self.resourceType.encode('utf-8') if sys.version_info[0] == 2 else self.resourceType)
            oprot.writeFieldEnd()
        if self.platformId is not None:
            oprot.writeFieldBegin('platformId', TType.STRING, 5)
            oprot.writeString(self.platformId.encode('utf-8') if sys.version_info[0] == 2 else self.platformId)
            oprot.writeFieldEnd()
        if self.clientVersion is not None:
            oprot.writeFieldBegin('clientVersion', TType.STRING, 6)
            oprot.writeString(self.clientVersion.encode('utf-8') if sys.version_info[0] == 2 else self.clientVersion)
            oprot.writeFieldEnd()
        if self.logId is not None:
            oprot.writeFieldBegin('logId', TType.STRING, 7)
            oprot.writeString(self.logId.encode('utf-8') if sys.version_info[0] == 2 else self.logId)
            oprot.writeFieldEnd()
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 8)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.languageList is not None:
            oprot.writeFieldBegin('languageList', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.languageList))
            for iter209 in self.languageList:
                oprot.writeString(iter209.encode('utf-8') if sys.version_info[0] == 2 else iter209)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 10)
            oprot.writeString(self.country.encode('utf-8') if sys.version_info[0] == 2 else self.country)
            oprot.writeFieldEnd()
        if self.timeSign is not None:
            oprot.writeFieldBegin('timeSign', TType.STRING, 11)
            oprot.writeString(self.timeSign.encode('utf-8') if sys.version_info[0] == 2 else self.timeSign)
            oprot.writeFieldEnd()
        if self.execTimeSign is not None:
            oprot.writeFieldBegin('execTimeSign', TType.STRING, 12)
            oprot.writeString(self.execTimeSign.encode('utf-8') if sys.version_info[0] == 2 else self.execTimeSign)
            oprot.writeFieldEnd()
        if self.execTimeDelay is not None:
            oprot.writeFieldBegin('execTimeDelay', TType.STRING, 13)
            oprot.writeString(self.execTimeDelay.encode('utf-8') if sys.version_info[0] == 2 else self.execTimeDelay)
            oprot.writeFieldEnd()
        if self.debugOption is not None:
            oprot.writeFieldBegin('debugOption', TType.STRING, 14)
            oprot.writeString(self.debugOption.encode('utf-8') if sys.version_info[0] == 2 else self.debugOption)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 15)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.specialRequest is not None:
            oprot.writeFieldBegin('specialRequest', TType.STRUCT, 16)
            self.specialRequest.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdResponse(object):
    """
    Attributes:
     - AdResultList
     - smallFlowTag
     - responseType
     - logId
     - serviceName
     - errorNo
     - debugInfo
    """


    def __init__(self, AdResultList=None, smallFlowTag=None, responseType=None, logId=None, serviceName=None, errorNo=None, debugInfo=None,):
        self.AdResultList = AdResultList
        self.smallFlowTag = smallFlowTag
        self.responseType = responseType
        self.logId = logId
        self.serviceName = serviceName
        self.errorNo = errorNo
        self.debugInfo = debugInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.AdResultList = []
                    (_etype213, _size210) = iprot.readListBegin()
                    for _i214 in range(_size210):
                        _elem215 = AdResult()
                        _elem215.read(iprot)
                        self.AdResultList.append(_elem215)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.smallFlowTag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.responseType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.logId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.errorNo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.debugInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdResponse')
        if self.AdResultList is not None:
            oprot.writeFieldBegin('AdResultList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.AdResultList))
            for iter216 in self.AdResultList:
                iter216.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.smallFlowTag is not None:
            oprot.writeFieldBegin('smallFlowTag', TType.STRING, 2)
            oprot.writeString(self.smallFlowTag.encode('utf-8') if sys.version_info[0] == 2 else self.smallFlowTag)
            oprot.writeFieldEnd()
        if self.responseType is not None:
            oprot.writeFieldBegin('responseType', TType.STRING, 3)
            oprot.writeString(self.responseType.encode('utf-8') if sys.version_info[0] == 2 else self.responseType)
            oprot.writeFieldEnd()
        if self.logId is not None:
            oprot.writeFieldBegin('logId', TType.STRING, 4)
            oprot.writeString(self.logId.encode('utf-8') if sys.version_info[0] == 2 else self.logId)
            oprot.writeFieldEnd()
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 5)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.errorNo is not None:
            oprot.writeFieldBegin('errorNo', TType.STRING, 6)
            oprot.writeString(self.errorNo.encode('utf-8') if sys.version_info[0] == 2 else self.errorNo)
            oprot.writeFieldEnd()
        if self.debugInfo is not None:
            oprot.writeFieldBegin('debugInfo', TType.STRING, 7)
            oprot.writeString(self.debugInfo.encode('utf-8') if sys.version_info[0] == 2 else self.debugInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AdResult(object):
    """
    Attributes:
     - id
     - type
     - attachContent
     - adItemName
     - adItemId
     - destinationType
     - contentType
     - contentId
     - directLink
     - imageUrls
     - headline
     - body
     - houseAdStyle
     - cardMoreStyle
     - startDate
     - endDate
     - dailyStartTime
     - dailyEndTime
     - adPlcName
     - adPlcId
     - preLoad
    """


    def __init__(self, id=None, type=None, attachContent=None, adItemName=None, adItemId=None, destinationType=None, contentType=None, contentId=None, directLink=None, imageUrls=None, headline=None, body=None, houseAdStyle=None, cardMoreStyle=None, startDate=None, endDate=None, dailyStartTime=None, dailyEndTime=None, adPlcName=None, adPlcId=None, preLoad=None,):
        self.id = id
        self.type = type
        self.attachContent = attachContent
        self.adItemName = adItemName
        self.adItemId = adItemId
        self.destinationType = destinationType
        self.contentType = contentType
        self.contentId = contentId
        self.directLink = directLink
        self.imageUrls = imageUrls
        self.headline = headline
        self.body = body
        self.houseAdStyle = houseAdStyle
        self.cardMoreStyle = cardMoreStyle
        self.startDate = startDate
        self.endDate = endDate
        self.dailyStartTime = dailyStartTime
        self.dailyEndTime = dailyEndTime
        self.adPlcName = adPlcName
        self.adPlcId = adPlcId
        self.preLoad = preLoad

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.attachContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.adItemName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.adItemId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.destinationType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.contentType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.contentId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.directLink = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.imageUrls = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.headline = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.body = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.houseAdStyle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.cardMoreStyle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.startDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.endDate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.dailyStartTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.dailyEndTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.adPlcName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.adPlcId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BYTE:
                    self.preLoad = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AdResult')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.attachContent is not None:
            oprot.writeFieldBegin('attachContent', TType.STRING, 3)
            oprot.writeString(self.attachContent.encode('utf-8') if sys.version_info[0] == 2 else self.attachContent)
            oprot.writeFieldEnd()
        if self.adItemName is not None:
            oprot.writeFieldBegin('adItemName', TType.STRING, 4)
            oprot.writeString(self.adItemName.encode('utf-8') if sys.version_info[0] == 2 else self.adItemName)
            oprot.writeFieldEnd()
        if self.adItemId is not None:
            oprot.writeFieldBegin('adItemId', TType.STRING, 5)
            oprot.writeString(self.adItemId.encode('utf-8') if sys.version_info[0] == 2 else self.adItemId)
            oprot.writeFieldEnd()
        if self.destinationType is not None:
            oprot.writeFieldBegin('destinationType', TType.STRING, 6)
            oprot.writeString(self.destinationType.encode('utf-8') if sys.version_info[0] == 2 else self.destinationType)
            oprot.writeFieldEnd()
        if self.contentType is not None:
            oprot.writeFieldBegin('contentType', TType.STRING, 7)
            oprot.writeString(self.contentType.encode('utf-8') if sys.version_info[0] == 2 else self.contentType)
            oprot.writeFieldEnd()
        if self.contentId is not None:
            oprot.writeFieldBegin('contentId', TType.STRING, 8)
            oprot.writeString(self.contentId.encode('utf-8') if sys.version_info[0] == 2 else self.contentId)
            oprot.writeFieldEnd()
        if self.directLink is not None:
            oprot.writeFieldBegin('directLink', TType.STRING, 9)
            oprot.writeString(self.directLink.encode('utf-8') if sys.version_info[0] == 2 else self.directLink)
            oprot.writeFieldEnd()
        if self.imageUrls is not None:
            oprot.writeFieldBegin('imageUrls', TType.STRING, 10)
            oprot.writeString(self.imageUrls.encode('utf-8') if sys.version_info[0] == 2 else self.imageUrls)
            oprot.writeFieldEnd()
        if self.headline is not None:
            oprot.writeFieldBegin('headline', TType.STRING, 11)
            oprot.writeString(self.headline.encode('utf-8') if sys.version_info[0] == 2 else self.headline)
            oprot.writeFieldEnd()
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRING, 12)
            oprot.writeString(self.body.encode('utf-8') if sys.version_info[0] == 2 else self.body)
            oprot.writeFieldEnd()
        if self.houseAdStyle is not None:
            oprot.writeFieldBegin('houseAdStyle', TType.STRING, 13)
            oprot.writeString(self.houseAdStyle.encode('utf-8') if sys.version_info[0] == 2 else self.houseAdStyle)
            oprot.writeFieldEnd()
        if self.cardMoreStyle is not None:
            oprot.writeFieldBegin('cardMoreStyle', TType.STRING, 14)
            oprot.writeString(self.cardMoreStyle.encode('utf-8') if sys.version_info[0] == 2 else self.cardMoreStyle)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.STRING, 15)
            oprot.writeString(self.startDate.encode('utf-8') if sys.version_info[0] == 2 else self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.STRING, 16)
            oprot.writeString(self.endDate.encode('utf-8') if sys.version_info[0] == 2 else self.endDate)
            oprot.writeFieldEnd()
        if self.dailyStartTime is not None:
            oprot.writeFieldBegin('dailyStartTime', TType.STRING, 17)
            oprot.writeString(self.dailyStartTime.encode('utf-8') if sys.version_info[0] == 2 else self.dailyStartTime)
            oprot.writeFieldEnd()
        if self.dailyEndTime is not None:
            oprot.writeFieldBegin('dailyEndTime', TType.STRING, 18)
            oprot.writeString(self.dailyEndTime.encode('utf-8') if sys.version_info[0] == 2 else self.dailyEndTime)
            oprot.writeFieldEnd()
        if self.adPlcName is not None:
            oprot.writeFieldBegin('adPlcName', TType.STRING, 19)
            oprot.writeString(self.adPlcName.encode('utf-8') if sys.version_info[0] == 2 else self.adPlcName)
            oprot.writeFieldEnd()
        if self.adPlcId is not None:
            oprot.writeFieldBegin('adPlcId', TType.STRING, 20)
            oprot.writeString(self.adPlcId.encode('utf-8') if sys.version_info[0] == 2 else self.adPlcId)
            oprot.writeFieldEnd()
        if self.preLoad is not None:
            oprot.writeFieldBegin('preLoad', TType.BYTE, 21)
            oprot.writeByte(self.preLoad)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TabParams(object):
    """
    Attributes:
     - num
     - finalId
    """


    def __init__(self, num=None, finalId=None,):
        self.num = num
        self.finalId = finalId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.finalId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TabParams')
        if self.num is not None:
            oprot.writeFieldBegin('num', TType.I32, 1)
            oprot.writeI32(self.num)
            oprot.writeFieldEnd()
        if self.finalId is not None:
            oprot.writeFieldBegin('finalId', TType.STRING, 2)
            oprot.writeString(self.finalId.encode('utf-8') if sys.version_info[0] == 2 else self.finalId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BannerParams(object):
    """
    Attributes:
     - num
     - finalId
    """


    def __init__(self, num=None, finalId=None,):
        self.num = num
        self.finalId = finalId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.finalId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BannerParams')
        if self.num is not None:
            oprot.writeFieldBegin('num', TType.I32, 1)
            oprot.writeI32(self.num)
            oprot.writeFieldEnd()
        if self.finalId is not None:
            oprot.writeFieldBegin('finalId', TType.STRING, 2)
            oprot.writeString(self.finalId.encode('utf-8') if sys.version_info[0] == 2 else self.finalId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CardParams(object):
    """
    Attributes:
     - num
     - finalId
    """


    def __init__(self, num=None, finalId=None,):
        self.num = num
        self.finalId = finalId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.finalId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CardParams')
        if self.num is not None:
            oprot.writeFieldBegin('num', TType.I32, 1)
            oprot.writeI32(self.num)
            oprot.writeFieldEnd()
        if self.finalId is not None:
            oprot.writeFieldBegin('finalId', TType.STRING, 2)
            oprot.writeString(self.finalId.encode('utf-8') if sys.version_info[0] == 2 else self.finalId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ItemParams(object):
    """
    Attributes:
     - num
     - finalId
     - type
    """


    def __init__(self, num=None, finalId=None, type=None,):
        self.num = num
        self.finalId = finalId
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.finalId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.type = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ItemParams')
        if self.num is not None:
            oprot.writeFieldBegin('num', TType.I32, 1)
            oprot.writeI32(self.num)
            oprot.writeFieldEnd()
        if self.finalId is not None:
            oprot.writeFieldBegin('finalId', TType.STRING, 2)
            oprot.writeString(self.finalId.encode('utf-8') if sys.version_info[0] == 2 else self.finalId)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.BYTE, 3)
            oprot.writeByte(self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LorryRequest(object):
    """
    Attributes:
     - interfaceName
     - userId
     - country
     - area
     - language
     - networkStatus
     - deviceInfo
     - platformId
     - tabId
     - resourceId
     - tabParams
     - bannerParams
     - cardParams
     - itemParams
     - languageList
     - clientVersion
     - location
     - logId
     - timeSign
     - execTimeSign
     - execTimeDelay
     - envOption
     - debugOption
     - bottomNavigation
     - specialMode
     - redPoint
     - specialRequest
    """


    def __init__(self, interfaceName=None, userId=None, country=None, area=None, language=None, networkStatus=None, deviceInfo=None, platformId=None, tabId=None, resourceId=None, tabParams=None, bannerParams=None, cardParams=None, itemParams=None, languageList=None, clientVersion=None, location=None, logId=None, timeSign=None, execTimeSign=None, execTimeDelay=None, envOption=None, debugOption=None, bottomNavigation=None, specialMode=None, redPoint=None, specialRequest=None,):
        self.interfaceName = interfaceName
        self.userId = userId
        self.country = country
        self.area = area
        self.language = language
        self.networkStatus = networkStatus
        self.deviceInfo = deviceInfo
        self.platformId = platformId
        self.tabId = tabId
        self.resourceId = resourceId
        self.tabParams = tabParams
        self.bannerParams = bannerParams
        self.cardParams = cardParams
        self.itemParams = itemParams
        self.languageList = languageList
        self.clientVersion = clientVersion
        self.location = location
        self.logId = logId
        self.timeSign = timeSign
        self.execTimeSign = execTimeSign
        self.execTimeDelay = execTimeDelay
        self.envOption = envOption
        self.debugOption = debugOption
        self.bottomNavigation = bottomNavigation
        self.specialMode = specialMode
        self.redPoint = redPoint
        self.specialRequest = specialRequest

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.interfaceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.country = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.area = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.language = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.networkStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.deviceInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.platformId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.tabId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.resourceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.tabParams = TabParams()
                    self.tabParams.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.bannerParams = BannerParams()
                    self.bannerParams.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.cardParams = CardParams()
                    self.cardParams.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRUCT:
                    self.itemParams = ItemParams()
                    self.itemParams.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.languageList = []
                    (_etype220, _size217) = iprot.readListBegin()
                    for _i221 in range(_size217):
                        _elem222 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.languageList.append(_elem222)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.clientVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.logId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.timeSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.execTimeSign = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.execTimeDelay = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.envOption = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.debugOption = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.bottomNavigation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.specialMode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.redPoint = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRUCT:
                    self.specialRequest = SpecialRequest()
                    self.specialRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LorryRequest')
        if self.interfaceName is not None:
            oprot.writeFieldBegin('interfaceName', TType.STRING, 1)
            oprot.writeString(self.interfaceName.encode('utf-8') if sys.version_info[0] == 2 else self.interfaceName)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 3)
            oprot.writeString(self.country.encode('utf-8') if sys.version_info[0] == 2 else self.country)
            oprot.writeFieldEnd()
        if self.area is not None:
            oprot.writeFieldBegin('area', TType.STRING, 4)
            oprot.writeString(self.area.encode('utf-8') if sys.version_info[0] == 2 else self.area)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 5)
            oprot.writeString(self.language.encode('utf-8') if sys.version_info[0] == 2 else self.language)
            oprot.writeFieldEnd()
        if self.networkStatus is not None:
            oprot.writeFieldBegin('networkStatus', TType.STRING, 6)
            oprot.writeString(self.networkStatus.encode('utf-8') if sys.version_info[0] == 2 else self.networkStatus)
            oprot.writeFieldEnd()
        if self.deviceInfo is not None:
            oprot.writeFieldBegin('deviceInfo', TType.STRING, 7)
            oprot.writeString(self.deviceInfo.encode('utf-8') if sys.version_info[0] == 2 else self.deviceInfo)
            oprot.writeFieldEnd()
        if self.platformId is not None:
            oprot.writeFieldBegin('platformId', TType.STRING, 8)
            oprot.writeString(self.platformId.encode('utf-8') if sys.version_info[0] == 2 else self.platformId)
            oprot.writeFieldEnd()
        if self.tabId is not None:
            oprot.writeFieldBegin('tabId', TType.STRING, 9)
            oprot.writeString(self.tabId.encode('utf-8') if sys.version_info[0] == 2 else self.tabId)
            oprot.writeFieldEnd()
        if self.resourceId is not None:
            oprot.writeFieldBegin('resourceId', TType.STRING, 10)
            oprot.writeString(self.resourceId.encode('utf-8') if sys.version_info[0] == 2 else self.resourceId)
            oprot.writeFieldEnd()
        if self.tabParams is not None:
            oprot.writeFieldBegin('tabParams', TType.STRUCT, 11)
            self.tabParams.write(oprot)
            oprot.writeFieldEnd()
        if self.bannerParams is not None:
            oprot.writeFieldBegin('bannerParams', TType.STRUCT, 12)
            self.bannerParams.write(oprot)
            oprot.writeFieldEnd()
        if self.cardParams is not None:
            oprot.writeFieldBegin('cardParams', TType.STRUCT, 13)
            self.cardParams.write(oprot)
            oprot.writeFieldEnd()
        if self.itemParams is not None:
            oprot.writeFieldBegin('itemParams', TType.STRUCT, 14)
            self.itemParams.write(oprot)
            oprot.writeFieldEnd()
        if self.languageList is not None:
            oprot.writeFieldBegin('languageList', TType.LIST, 15)
            oprot.writeListBegin(TType.STRING, len(self.languageList))
            for iter223 in self.languageList:
                oprot.writeString(iter223.encode('utf-8') if sys.version_info[0] == 2 else iter223)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.clientVersion is not None:
            oprot.writeFieldBegin('clientVersion', TType.STRING, 16)
            oprot.writeString(self.clientVersion.encode('utf-8') if sys.version_info[0] == 2 else self.clientVersion)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 17)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.logId is not None:
            oprot.writeFieldBegin('logId', TType.STRING, 18)
            oprot.writeString(self.logId.encode('utf-8') if sys.version_info[0] == 2 else self.logId)
            oprot.writeFieldEnd()
        if self.timeSign is not None:
            oprot.writeFieldBegin('timeSign', TType.STRING, 19)
            oprot.writeString(self.timeSign.encode('utf-8') if sys.version_info[0] == 2 else self.timeSign)
            oprot.writeFieldEnd()
        if self.execTimeSign is not None:
            oprot.writeFieldBegin('execTimeSign', TType.STRING, 20)
            oprot.writeString(self.execTimeSign.encode('utf-8') if sys.version_info[0] == 2 else self.execTimeSign)
            oprot.writeFieldEnd()
        if self.execTimeDelay is not None:
            oprot.writeFieldBegin('execTimeDelay', TType.STRING, 21)
            oprot.writeString(self.execTimeDelay.encode('utf-8') if sys.version_info[0] == 2 else self.execTimeDelay)
            oprot.writeFieldEnd()
        if self.envOption is not None:
            oprot.writeFieldBegin('envOption', TType.STRING, 22)
            oprot.writeString(self.envOption.encode('utf-8') if sys.version_info[0] == 2 else self.envOption)
            oprot.writeFieldEnd()
        if self.debugOption is not None:
            oprot.writeFieldBegin('debugOption', TType.STRING, 23)
            oprot.writeString(self.debugOption.encode('utf-8') if sys.version_info[0] == 2 else self.debugOption)
            oprot.writeFieldEnd()
        if self.bottomNavigation is not None:
            oprot.writeFieldBegin('bottomNavigation', TType.STRING, 24)
            oprot.writeString(self.bottomNavigation.encode('utf-8') if sys.version_info[0] == 2 else self.bottomNavigation)
            oprot.writeFieldEnd()
        if self.specialMode is not None:
            oprot.writeFieldBegin('specialMode', TType.STRING, 25)
            oprot.writeString(self.specialMode.encode('utf-8') if sys.version_info[0] == 2 else self.specialMode)
            oprot.writeFieldEnd()
        if self.redPoint is not None:
            oprot.writeFieldBegin('redPoint', TType.STRING, 26)
            oprot.writeString(self.redPoint.encode('utf-8') if sys.version_info[0] == 2 else self.redPoint)
            oprot.writeFieldEnd()
        if self.specialRequest is not None:
            oprot.writeFieldBegin('specialRequest', TType.STRUCT, 27)
            self.specialRequest.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LorryResponse(object):
    """
    Attributes:
     - tabResponse
     - bannerResponse
     - cardResponse
     - requestLogId
     - errorReason
     - totalTime
    """


    def __init__(self, tabResponse=None, bannerResponse=None, cardResponse=None, requestLogId=None, errorReason=None, totalTime=None,):
        self.tabResponse = tabResponse
        self.bannerResponse = bannerResponse
        self.cardResponse = cardResponse
        self.requestLogId = requestLogId
        self.errorReason = errorReason
        self.totalTime = totalTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.tabResponse = Response()
                    self.tabResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bannerResponse = Response()
                    self.bannerResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.cardResponse = Response()
                    self.cardResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.requestLogId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.errorReason = []
                    (_etype227, _size224) = iprot.readListBegin()
                    for _i228 in range(_size224):
                        _elem229 = ErrorReason()
                        _elem229.read(iprot)
                        self.errorReason.append(_elem229)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.totalTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LorryResponse')
        if self.tabResponse is not None:
            oprot.writeFieldBegin('tabResponse', TType.STRUCT, 1)
            self.tabResponse.write(oprot)
            oprot.writeFieldEnd()
        if self.bannerResponse is not None:
            oprot.writeFieldBegin('bannerResponse', TType.STRUCT, 2)
            self.bannerResponse.write(oprot)
            oprot.writeFieldEnd()
        if self.cardResponse is not None:
            oprot.writeFieldBegin('cardResponse', TType.STRUCT, 3)
            self.cardResponse.write(oprot)
            oprot.writeFieldEnd()
        if self.requestLogId is not None:
            oprot.writeFieldBegin('requestLogId', TType.STRING, 4)
            oprot.writeString(self.requestLogId.encode('utf-8') if sys.version_info[0] == 2 else self.requestLogId)
            oprot.writeFieldEnd()
        if self.errorReason is not None:
            oprot.writeFieldBegin('errorReason', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.errorReason))
            for iter230 in self.errorReason:
                iter230.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.totalTime is not None:
            oprot.writeFieldBegin('totalTime', TType.STRING, 6)
            oprot.writeString(self.totalTime.encode('utf-8') if sys.version_info[0] == 2 else self.totalTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(FiltrationReason)
FiltrationReason.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'reason', 'UTF8', None, ),  # 2
)
all_structs.append(ErrorReason)
ErrorReason.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'reason', 'UTF8', None, ),  # 2
)
all_structs.append(AdditionalInfo)
AdditionalInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'resourceType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'icon', 'UTF8', None, ),  # 4
)
all_structs.append(LocalFileInfo)
LocalFileInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fileName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'title', 'UTF8', None, ),  # 2
    (3, TType.I32, 'duration', None, None, ),  # 3
)
all_structs.append(Location)
Location.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cityName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'countryCode', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'longitude', None, None, ),  # 3
    (4, TType.DOUBLE, 'latitude', None, None, ),  # 4
    (5, TType.STRING, 'state', 'UTF8', None, ),  # 5
)
all_structs.append(SpecialRequest)
SpecialRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userSmallFlowCode', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'country', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'state', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'other', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'needToHit', 'UTF8', None, ),  # 6
)
all_structs.append(Request)
Request.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'interfaceName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cardId', 'UTF8', None, ),  # 3
    (4, TType.I32, 'num', None, None, ),  # 4
    (5, TType.STRING, 'finalId', 'UTF8', None, ),  # 5
    (6, TType.BYTE, 'type', None, None, ),  # 6
    (7, TType.STRING, 'resourceId', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'resourceType', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'platformId', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'tabId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'interfaceNewName', 'UTF8', None, ),  # 11
    (12, TType.STRUCT, 'localFileInfo', [LocalFileInfo, None], None, ),  # 12
    (13, TType.STRING, 'country', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'area', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'language', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'networkStatus', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'deviceInfo', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'filterId', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'entranceType', 'UTF8', None, ),  # 19
    (20, TType.LIST, 'languageList', (TType.STRING, 'UTF8', False), None, ),  # 20
    (21, TType.STRING, 'nextToken', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'searchContent', 'UTF8', None, ),  # 22
    (23, TType.LIST, 'genresList', (TType.STRING, 'UTF8', False), None, ),  # 23
    (24, TType.STRING, 'logId', 'UTF8', None, ),  # 24
    (25, TType.STRING, 'serviceName', 'UTF8', None, ),  # 25
    (26, TType.STRING, 'envOption', 'UTF8', None, ),  # 26
    (27, TType.STRING, 'timeSign', 'UTF8', None, ),  # 27
    (28, TType.STRING, 'execTimeSign', 'UTF8', None, ),  # 28
    (29, TType.STRING, 'execTimeDelay', 'UTF8', None, ),  # 29
    (30, TType.STRING, 'debugOption', 'UTF8', None, ),  # 30
    (31, TType.STRING, 'clientVersion', 'UTF8', None, ),  # 31
    (32, TType.LIST, 'browseLangs', (TType.STRING, 'UTF8', False), None, ),  # 32
    (33, TType.STRING, 'sortOpt', 'UTF8', None, ),  # 33
    (34, TType.LIST, 'singerList', (TType.STRING, 'UTF8', False), None, ),  # 34
    (35, TType.LIST, 'actorList', (TType.STRING, 'UTF8', False), None, ),  # 35
    (36, TType.LIST, 'directorList', (TType.STRING, 'UTF8', False), None, ),  # 36
    (37, TType.LIST, 'releaseYears', (TType.STRING, 'UTF8', False), None, ),  # 37
    (38, TType.STRING, 'redPoint', 'UTF8', None, ),  # 38
    (39, TType.STRING, 'bottomNavigation', 'UTF8', None, ),  # 39
    (40, TType.LIST, 'liveCategoryList', (TType.STRING, 'UTF8', False), None, ),  # 40
    (41, TType.STRUCT, 'location', [Location, None], None, ),  # 41
    (42, TType.LIST, 'extraLanguageList', (TType.STRING, 'UTF8', False), None, ),  # 42
    (43, TType.STRING, 'specialMode', 'UTF8', None, ),  # 43
    (44, TType.LIST, 'publisherList', (TType.STRING, 'UTF8', False), None, ),  # 44
    (45, TType.STRING, 'userSmallFlowCode', 'UTF8', None, ),  # 45
    (46, TType.BYTE, 'needDownload', None, None, ),  # 46
    (47, TType.STRUCT, 'specialRequest', [SpecialRequest, None], None, ),  # 47
    (48, TType.I32, 'pageNum', None, None, ),  # 48
    (49, TType.BYTE, 'needPreload', None, None, ),  # 49
    (50, TType.BOOL, 'fromLorry', None, None, ),  # 50
)
all_structs.append(Genres)
Genres.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'genresId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'genresName', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'backgroundPic', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(Result)
Result.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'recallSign', None, None, ),  # 2
    (3, TType.STRING, 'resultType', 'UTF8', None, ),  # 3
    (4, TType.I64, 'preLoadTime', None, None, ),  # 4
    (5, TType.STRING, 'attachContent', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'languageList', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I64, 'releaseDate', None, None, ),  # 7
    (8, TType.DOUBLE, 'heat', None, None, ),  # 8
    (9, TType.STRING, 'thumbnailUrls', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'labels', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'scoreInfo', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'webUrl', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'title', 'UTF8', None, ),  # 13
    (14, TType.LIST, 'recallIdList', (TType.I32, None, False), None, ),  # 14
    (15, TType.STRING, 'thumbnailFormat', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'thumbnailUrlsWebp', 'UTF8', None, ),  # 16
)
all_structs.append(Card)
Card.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cardName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'cardId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'listStyle', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'moreStyle', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'icon', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'languageList', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.BOOL, 'isRandom', None, None, ),  # 7
    (8, TType.I32, 'cardType', None, None, ),  # 8
    (9, TType.STRING, 'description', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'flagName', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'flagColor', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'featuredType', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'originalThumbnail', 'UTF8', None, ),  # 13
    (14, TType.I64, 'preLoadTime', None, None, ),  # 14
    (15, TType.STRING, 'attachContent', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'cardContentType', 'UTF8', None, ),  # 16
    (17, TType.DOUBLE, 'personScore', None, None, ),  # 17
    (18, TType.STRING, 'recallType', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'strategyType', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'clientVersionInfo', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'backgroundColorCode', 'UTF8', None, ),  # 21
    (22, TType.I32, 'lockedOrder', None, None, ),  # 22
    (23, TType.STRING, 'seeMore', 'UTF8', None, ),  # 23
    (24, TType.STRING, 'webUrl', 'UTF8', None, ),  # 24
    (25, TType.STRING, 'scoreInfo', 'UTF8', None, ),  # 25
    (26, TType.LIST, 'stateList', (TType.STRING, 'UTF8', False), None, ),  # 26
    (27, TType.STRING, 'competitionId', 'UTF8', None, ),  # 27
    (28, TType.STRUCT, 'cardItemResponse', [Response, None], None, ),  # 28
)
all_structs.append(Tabs)
Tabs.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'tabName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'tabId', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'cardList', (TType.STRUCT, [Card, None], False), None, ),  # 3
    (4, TType.STRING, 'style', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'nextToken', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'attachContent', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'clientVersionInfo', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'bottomNavigation', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'lockInfo', 'UTF8', None, ),  # 9
    (10, TType.LIST, 'countries', (TType.STRING, 'UTF8', False), None, ),  # 10
    (11, TType.BYTE, 'order', None, None, ),  # 11
    (12, TType.STRING, 'relationCardId', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'advertiseId', 'UTF8', None, ),  # 13
)
all_structs.append(Banner)
Banner.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'bannerName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'bannerType', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'headPicture', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'subTitle', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'additionalInfos', (TType.STRUCT, [AdditionalInfo, None], False), None, ),  # 6
    (7, TType.I32, 'order', None, None, ),  # 7
    (8, TType.STRING, 'bannerId', 'UTF8', None, ),  # 8
    (9, TType.I64, 'preLoadTime', None, None, ),  # 9
    (10, TType.STRING, 'attachContent', 'UTF8', None, ),  # 10
    (11, TType.LIST, 'languageList', (TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.STRING, 'scoreInfo', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'webUrl', 'UTF8', None, ),  # 13
    (14, TType.LIST, 'supportStates', (TType.STRING, 'UTF8', False), None, ),  # 14
    (15, TType.STRING, 'thumbnailFormat', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'thumbnailUrlsWebp', 'UTF8', None, ),  # 16
)
all_structs.append(Response)
Response.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'resultList', (TType.STRUCT, [Result, None], False), None, ),  # 1
    (2, TType.STRING, 'smallFlowTag', 'UTF8', None, ),  # 2
    (3, TType.I16, 'flag', None, None, ),  # 3
    (4, TType.STRING, 'requestChannel', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'responseType', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'listStyle', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'moreStyle', 'UTF8', None, ),  # 7
    (8, TType.BYTE, 'hasHead', None, None, ),  # 8
    (9, TType.BYTE, 'hasTail', None, None, ),  # 9
    (10, TType.BOOL, 'disableCache', None, None, ),  # 10
    (11, TType.STRING, 'logId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'serviceName', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'resStatus', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'debugInfo', 'UTF8', None, ),  # 14
    (15, TType.LIST, 'tabList', (TType.STRUCT, [Tabs, None], False), None, ),  # 15
    (16, TType.LIST, 'bannerList', (TType.STRUCT, [Banner, None], False), None, ),  # 16
    (17, TType.LIST, 'cardList', (TType.STRUCT, [Card, None], False), None, ),  # 17
    (18, TType.STRING, 'errorNo', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'totalNum', 'UTF8', None, ),  # 19
    (20, TType.LIST, 'filterReasonList', (TType.STRUCT, [FiltrationReason, None], False), None, ),  # 20
    (21, TType.LIST, 'requestIssue', (TType.STRING, 'UTF8', False), None, ),  # 21
    (22, TType.STRING, 'totalTime', 'UTF8', None, ),  # 22
)
all_structs.append(OfflineRequest)
OfflineRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'interfaceName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'platformId', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'languageList', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'logId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'serviceName', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'timeSign', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'execTimeSign', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'execTimeDelay', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'clientVersion', 'UTF8', None, ),  # 10
    (11, TType.LIST, 'offlineFolder', (TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.STRING, 'specialMode', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'userSmallFlowCode', 'UTF8', None, ),  # 13
    (14, TType.STRUCT, 'specialRequest', [SpecialRequest, None], None, ),  # 14
)
all_structs.append(OfflineResponse)
OfflineResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'offlineResultList', (TType.STRUCT, [OfflineResult, None], False), None, ),  # 1
    (2, TType.STRING, 'smallFlowTag', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'responseType', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'disableCache', None, None, ),  # 4
    (5, TType.STRING, 'logId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'serviceName', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'resStatus', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'errorNo', 'UTF8', None, ),  # 8
)
all_structs.append(OfflineResult)
OfflineResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'positionType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'position', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'subtitle', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'type', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'id', 'UTF8', None, ),  # 6
)
all_structs.append(AdRequest)
AdRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'interfaceName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'resourceId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'resourceType', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'platformId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'clientVersion', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'logId', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'serviceName', 'UTF8', None, ),  # 8
    (9, TType.LIST, 'languageList', (TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.STRING, 'country', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'timeSign', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'execTimeSign', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'execTimeDelay', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'debugOption', 'UTF8', None, ),  # 14
    (15, TType.STRUCT, 'location', [Location, None], None, ),  # 15
    (16, TType.STRUCT, 'specialRequest', [SpecialRequest, None], None, ),  # 16
)
all_structs.append(AdResponse)
AdResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'AdResultList', (TType.STRUCT, [AdResult, None], False), None, ),  # 1
    (2, TType.STRING, 'smallFlowTag', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'responseType', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'logId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'serviceName', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'errorNo', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'debugInfo', 'UTF8', None, ),  # 7
)
all_structs.append(AdResult)
AdResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'attachContent', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'adItemName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'adItemId', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'destinationType', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'contentType', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'contentId', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'directLink', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'imageUrls', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'headline', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'body', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'houseAdStyle', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'cardMoreStyle', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'startDate', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'endDate', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'dailyStartTime', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'dailyEndTime', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'adPlcName', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'adPlcId', 'UTF8', None, ),  # 20
    (21, TType.BYTE, 'preLoad', None, None, ),  # 21
)
all_structs.append(TabParams)
TabParams.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'num', None, None, ),  # 1
    (2, TType.STRING, 'finalId', 'UTF8', None, ),  # 2
)
all_structs.append(BannerParams)
BannerParams.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'num', None, None, ),  # 1
    (2, TType.STRING, 'finalId', 'UTF8', None, ),  # 2
)
all_structs.append(CardParams)
CardParams.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'num', None, None, ),  # 1
    (2, TType.STRING, 'finalId', 'UTF8', None, ),  # 2
)
all_structs.append(ItemParams)
ItemParams.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'num', None, None, ),  # 1
    (2, TType.STRING, 'finalId', 'UTF8', None, ),  # 2
    (3, TType.BYTE, 'type', None, None, ),  # 3
)
all_structs.append(LorryRequest)
LorryRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'interfaceName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'country', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'area', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'language', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'networkStatus', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'deviceInfo', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'platformId', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'tabId', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'resourceId', 'UTF8', None, ),  # 10
    (11, TType.STRUCT, 'tabParams', [TabParams, None], None, ),  # 11
    (12, TType.STRUCT, 'bannerParams', [BannerParams, None], None, ),  # 12
    (13, TType.STRUCT, 'cardParams', [CardParams, None], None, ),  # 13
    (14, TType.STRUCT, 'itemParams', [ItemParams, None], None, ),  # 14
    (15, TType.LIST, 'languageList', (TType.STRING, 'UTF8', False), None, ),  # 15
    (16, TType.STRING, 'clientVersion', 'UTF8', None, ),  # 16
    (17, TType.STRUCT, 'location', [Location, None], None, ),  # 17
    (18, TType.STRING, 'logId', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'timeSign', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'execTimeSign', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'execTimeDelay', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'envOption', 'UTF8', None, ),  # 22
    (23, TType.STRING, 'debugOption', 'UTF8', None, ),  # 23
    (24, TType.STRING, 'bottomNavigation', 'UTF8', None, ),  # 24
    (25, TType.STRING, 'specialMode', 'UTF8', None, ),  # 25
    (26, TType.STRING, 'redPoint', 'UTF8', None, ),  # 26
    (27, TType.STRUCT, 'specialRequest', [SpecialRequest, None], None, ),  # 27
)
all_structs.append(LorryResponse)
LorryResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'tabResponse', [Response, None], None, ),  # 1
    (2, TType.STRUCT, 'bannerResponse', [Response, None], None, ),  # 2
    (3, TType.STRUCT, 'cardResponse', [Response, None], None, ),  # 3
    (4, TType.STRING, 'requestLogId', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'errorReason', (TType.STRUCT, [ErrorReason, None], False), None, ),  # 5
    (6, TType.STRING, 'totalTime', 'UTF8', None, ),  # 6
)
fix_spec(all_structs)
del all_structs
